From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 20 Sep 2022 01:29:11 +0200
Subject: [PATCH] Configurable keep-alive


diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 29aa1718784728eecf3d7f2aca96cf6ac707ac08..9056ed8b47ad8d99e12b83fee93a60e95f16ec3e 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -8,7 +8,6 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
-import io.papermc.paper.configuration.GlobalConfiguration;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -413,7 +412,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         // Purpur start
         if (dev.etil.mirai.MiraiConfig.useAlternateKeepAlive) {
             if (elapsedTime >= 1000L) { // 1 second
-                if (!processedDisconnect && keepAlives.size() > KEEPALIVE_LIMIT) {
+                if (!processedDisconnect && keepAlives.size() > KEEPALIVE_LIMIT && SukiGlobalConfiguration.get().keepalive.kickPlayerFor.lateResponse) { // Suki - configurable keep-alive - no disconnect on late or wrong keep-alive
                     LOGGER.warn("{} was kicked due to keepalive timeout!", player.getName());
                     disconnect(Component.translatable("disconnect.timeout"));
                 } else {
@@ -425,13 +424,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         } else
         // Purpur end
 
-        if (this.keepAlivePending) {
+        if (this.keepAlivePending && SukiGlobalConfiguration.get().keepalive.kickPlayerFor.lateResponse) { // Suki - configurable keep-alive - no disconnect on late or wrong keep-alive
             if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
                 ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getScoreboardName()); // more info
-                this.disconnect(Component.translatable("disconnect.timeout", me.titaniumtown.Constants.EMPTY_object_arr), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause // JettPack
+                this.disconnect(Component.translatable("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
             }
         } else {
-            if (elapsedTime >= 15000L) { // 15 seconds
+            if (elapsedTime >= SukiGlobalConfiguration.get().keepalive.sendInterval) { // Suki - configurable keep-alive
                 this.keepAlivePending = true;
                 this.keepAliveTime = currentTime;
                 this.keepAliveChallenge = currentTime;
@@ -3679,11 +3678,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             this.player.latency = (this.player.latency * 3 + i) / 4;
             this.keepAlivePending = false;
         } else if (!this.isSingleplayerOwner()) {
-            // Paper start - This needs to be handled on the main thread for plugins
-            server.submit(() -> {
-            this.disconnect(Component.translatable("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
-            });
-            // Paper end
+            // Suki start - configurable keep-alive no disconnect on late or wrong keep-alive
+            // Do not disconnect when keepalive challenge is wrong
+            if (!((packet.getId() == this.keepAliveChallenge || !SukiGlobalConfiguration.get().keepalive.kickPlayerFor.wrongResponseId) && (this.keepAlivePending || !SukiGlobalConfiguration.get().keepalive.kickPlayerFor.unexpectedResponse))) {
+                // Paper start - This needs to be handled on the main thread for plugins
+                server.submit(() -> {
+                    this.disconnect(Component.translatable("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
+                });
+                // Paper end
+            }
+            // Suki end - configurable keep-alive - no disconnect on late or wrong keep-alive
         }
 
     }
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index 1acf4eb354854008c9dc085fbd61079cdcabd019..95e4b79bd489fba29a44b8d58f4de120d0ee9bc3 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -4,6 +4,7 @@ package org.sucraft.suki.configuration;
 
 import io.papermc.paper.configuration.Configuration;
 import io.papermc.paper.configuration.ConfigurationPart;
+import io.papermc.paper.configuration.GlobalConfiguration;
 import org.spongepowered.configurate.objectmapping.meta.Setting;
 
 @SuppressWarnings({"CanBeFinal", "FieldCanBeLocal", "FieldMayBeFinal", "NotNullFieldNotInitialized", "InnerClassMayBeStatic"})
@@ -174,4 +175,29 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
 
     // Suki end - allow invalid client view distance
 
+    // Suki start - configurable keep-alive
+
+    public Keepalive keepalive;
+
+    public class Keepalive extends ConfigurationPart {
+
+        /**
+         * In milliseconds
+         */
+        public int sendInterval = 15000; // 15 seconds
+
+        public KickPlayerFor kickPlayerFor;
+
+        public class KickPlayerFor extends ConfigurationPart {
+
+            public boolean lateResponse = true;
+            public boolean wrongResponseId = true;
+            public boolean unexpectedResponse = true;
+
+        }
+
+    }
+
+    // Suki end - configurable keep-alive
+
 }
