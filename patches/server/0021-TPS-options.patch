From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 20 Sep 2022 03:14:49 +0200
Subject: [PATCH] TPS options


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e68f3dbbc67e5352305e7f19944ea7c62e721e9d..6c6b7f48f16d4366039edcb8d02f849d0e6b5c2e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -13,6 +13,7 @@ import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.configuration.GlobalConfiguration;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import java.awt.image.BufferedImage;
 import java.io.BufferedWriter;
@@ -181,6 +182,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
 
 import co.aikar.timings.MinecraftTimings; // Paper
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnable> implements CommandSource, AutoCloseable { // Patina
 
@@ -1207,7 +1209,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnab
                 lastTickTime = java.time.Duration.ofNanos(System.nanoTime() - tickStart); // Yatopia
                 this.profiler.popPush("nextTickWait");
                 this.mayHaveDelayedTasks = true;
-                this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 50L, this.nextTickTime);
+                this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + (SukiGlobalConfiguration.get().tps.oversleep.min < 0 ? 50 : SukiGlobalConfiguration.get().tps.oversleep.min), this.nextTickTime); // Suki - TPS options - configurable tick oversleep
                 this.waitUntilNextTick();
                 this.profiler.pop();
                 this.endMetricsRecordingTick();
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index e183225a6371b70eb82be961dcc613ba5f0b68ed..96ffda20a1df8f26c9b9cd7ffe76b4a2293f4e3e 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -4,7 +4,6 @@ package org.sucraft.suki.configuration;
 
 import io.papermc.paper.configuration.Configuration;
 import io.papermc.paper.configuration.ConfigurationPart;
-import io.papermc.paper.configuration.GlobalConfiguration;
 import org.spongepowered.configurate.objectmapping.meta.Setting;
 
 @SuppressWarnings({"CanBeFinal", "FieldCanBeLocal", "FieldMayBeFinal", "NotNullFieldNotInitialized", "InnerClassMayBeStatic"})
@@ -126,4 +125,30 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
 
     // Suki end - configurable keep-alive
 
+    // Suki start - TPS options
+
+    public Tps tps;
+
+    public class Tps extends ConfigurationPart {
+
+        public Oversleep oversleep;
+
+        public class Oversleep extends ConfigurationPart {
+
+            /**
+             * In milliseconds (-1 reverts to default, which is 50)
+             */
+            public int min = -1;
+
+//            /**
+//             * In milliseconds (-1 reverts to default, which is 50)
+//             */
+//            public int max = -1;
+
+        }
+
+    }
+
+    // Suki end - TPS options
+
 }
