From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Mon, 19 Sep 2022 22:49:15 +0200
Subject: [PATCH] Last tick times in TPS command


diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 98daa177d87de6cccda7f2b4302799afdaddbf09..693306143bd77a1029df0ee3c5d93c0a48ac7f68 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -4,6 +4,7 @@ import net.minecraft.server.MinecraftServer;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
 
 public class TicksPerSecondCommand extends Command
 {
@@ -32,6 +33,26 @@ public class TicksPerSecondCommand extends Command
             tpsAvg[i] = TicksPerSecondCommand.format( tps[i] );
         }
         sender.sendMessage(ChatColor.GOLD + "TPS from last 5s, 1m, 5m, 15m: " + org.apache.commons.lang.StringUtils.join(tpsAvg, ", ")); // Purpur
+        // Suki start - last tick times in TPS command
+        if (SukiGlobalConfiguration.get().tps.command.lastTickTime.enabled) {
+            java.time.Duration lastProperTickTime = org.bukkit.Bukkit.getLastProperTickTime();
+            long lastProperTickTimeMillis = lastProperTickTime.toMillis();
+            java.time.Duration lastTickOversleepTime = org.bukkit.Bukkit.getLastTickOversleepTime();
+            long lastTickOversleepTimeMillis = lastTickOversleepTime.toMillis();
+            var lastTickTimeMessage = net.kyori.adventure.text.Component.text("Last tick: ")
+                .append(formatTickTimeDuration(lastProperTickTimeMillis, 40, 50));
+            if (SukiGlobalConfiguration.get().tps.command.lastTickTime.includeOversleep) {
+                lastTickTimeMessage = lastTickTimeMessage.append(net.kyori.adventure.text.Component.text(" self + "))
+                    .append(formatTickTimeDuration(lastTickOversleepTimeMillis, Math.max(1, 41 - lastProperTickTimeMillis), Math.max(1, 51 - lastProperTickTimeMillis)))
+                    .append(net.kyori.adventure.text.Component.text(" oversleep = "))
+                    .append(formatTickTimeDuration(lastProperTickTimeMillis + lastTickOversleepTimeMillis, 40, 50));
+            }
+            lastTickTimeMessage = lastTickTimeMessage.color(net.kyori.adventure.text.format.NamedTextColor.GOLD);
+            sender.sendMessage(
+                lastTickTimeMessage
+            );
+        }
+        // Suki end - last tick times in TPS command
         if (args.length > 0 && args[0].equals("mem") && sender.hasPermission("bukkit.command.tpsmemory")) {
             sender.sendMessage(ChatColor.GOLD + "Current Memory Usage: " + ChatColor.GREEN + ((Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024)) + "/" + (Runtime.getRuntime().totalMemory() / (1024 * 1024)) + " mb (Max: " + (Runtime.getRuntime().maxMemory() / (1024 * 1024)) + " mb)");
             if (!hasShownMemoryWarning) {
@@ -51,14 +72,13 @@ public class TicksPerSecondCommand extends Command
                 + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( carpetfixes.helpers.FastMath.round( tps * 100.0 ) / 100.0, 20.0 ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise // Mirai
     }
 
-    // Yatopia start - Last tick time API
-    public static String formatTo(java.time.Duration duration, java.util.concurrent.TimeUnit unit) {
-        java.util.concurrent.TimeUnit nanosUnit = java.util.concurrent.TimeUnit.NANOSECONDS;
-        long nanos = duration.toNanos();
-        long toAskedUnit = unit.convert( nanos, nanosUnit );
-        long ms = nanosUnit.toMillis( nanos );
-        ChatColor startingColor = ms < 40 ? ChatColor.GREEN : ( ms < 50 ) ? ChatColor.YELLOW : ChatColor.RED;
-        return startingColor.toString() + toAskedUnit + ChatColor.GOLD + org.yatopiamc.yatopia.server.util.TimeUtils.getFriendlyName( unit );
+    // Suki start - last tick times in TPS command
+
+    public static net.kyori.adventure.text.Component formatTickTimeDuration(long ms, long safeLimit, long severeLimit) {
+        return net.kyori.adventure.text.Component.text(ms + " ", ms < safeLimit ? net.kyori.adventure.text.format.NamedTextColor.GREEN : ( ms < severeLimit ) ? net.kyori.adventure.text.format.NamedTextColor.YELLOW : net.kyori.adventure.text.format.NamedTextColor.RED)
+            .append(net.kyori.adventure.text.Component.text("ms", net.kyori.adventure.text.format.NamedTextColor.GOLD));
     }
-    // Yatopia end
+
+    // Suki end - last tick times in TPS command
+
 }
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index 942156d2816f5cc7f0937843954f09135ca76855..e0a15122ff4797cb5f12a80f92ff4fc429c9bb02 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -179,6 +179,25 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
             }
         }
 
+        // Suki start - last tick times in TPS command
+
+        public Command command;
+
+        public class Command extends ConfigurationPart {
+
+            public LastTickTime lastTickTime;
+
+            public class LastTickTime extends ConfigurationPart {
+
+                public boolean enabled = true;
+                public boolean includeOversleep = true;
+
+            }
+
+        }
+
+        // Suki end - last tick times in TPS command
+
     }
 
     // Suki end - TPS options
diff --git a/src/main/java/org/yatopiamc/yatopia/server/util/TimeUtils.java b/src/main/java/org/yatopiamc/yatopia/server/util/TimeUtils.java
deleted file mode 100644
index bb023bcb4b1e1ab5261c83358ce0951cc35ba16d..0000000000000000000000000000000000000000
--- a/src/main/java/org/yatopiamc/yatopia/server/util/TimeUtils.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package org.yatopiamc.yatopia.server.util;
-
-import java.util.concurrent.TimeUnit;
-
-public class TimeUtils {
-
-    public static String getFriendlyName(TimeUnit unit) {
-        switch (unit) {
-            case NANOSECONDS:
-                return "ns";
-            case MILLISECONDS:
-                return "ms";
-            case MICROSECONDS:
-                return "micros";
-            case SECONDS:
-                return "s";
-            case MINUTES:
-                return "m";
-            case DAYS:
-                return "d";
-            case HOURS:
-                return "h";
-            default:
-                throw new AssertionError();
-        }
-    }
-}
\ No newline at end of file
