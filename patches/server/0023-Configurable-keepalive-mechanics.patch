From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 20 Sep 2022 01:29:11 +0200
Subject: [PATCH] Configurable keepalive mechanics


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 2be6a210e276d5cf02dc487c721e7da1ac061419..51ab2c492e68a7d3b5ecc63838a6233950ad0ce6 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -180,6 +180,29 @@ public class GlobalConfiguration extends ConfigurationPart {
 
     // Suki end - hide plugins
 
+    // Suki start - configurable keepalive
+
+    public Keepalive keepalive;
+
+    public class Keepalive extends ConfigurationPart {
+
+        /**
+         * In milliseconds
+         */
+        public int sendInterval = 15000; // 15 seconds
+
+        public Kick kick;
+
+        public class Kick extends ConfigurationPart {
+            public boolean lateResponse = true;
+            public boolean wrongResponseId = true;
+            public boolean unexpectedResponse = true;
+        }
+
+    }
+
+    // Suki end - configurable keepalive
+
     public Messages messages;
 
     public class Messages extends ConfigurationPart {
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index f34e0b05b8bf279e423b6fffa3b9f999eb6c1969..747e1fd98e4b0e9350ed6e75fa3c0e60465ab128 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.network;
 
+import com.destroystokyo.paper.PaperConfig;
 import com.google.common.collect.Lists;
 import com.google.common.primitives.Floats;
 import com.mojang.brigadier.ParseResults;
@@ -7,6 +8,9 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import io.papermc.paper.configuration.GlobalConfiguration;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -411,7 +415,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         // Purpur start
         if (wtf.etil.mirai.MiraiConfig.useAlternateKeepAlive) {
             if (elapsedTime >= 1000L) { // 1 second
-                if (!processedDisconnect && keepAlives.size() > KEEPALIVE_LIMIT) {
+                if (!processedDisconnect && keepAlives.size() > KEEPALIVE_LIMIT && GlobalConfiguration.get().keepalive.kick.lateResponse) { // Suki - no disconnect on late or wrong keepalive
                     LOGGER.warn("{} was kicked due to keepalive timeout!", player.getName());
                     disconnect(Component.translatable("disconnect.timeout"));
                 } else {
@@ -423,13 +427,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         } else
         // Purpur end
 
-        if (this.keepAlivePending) {
+        if (this.keepAlivePending && GlobalConfiguration.get().keepalive.kick.lateResponse) { // Suki - no disconnect on late or wrong keepalive
             if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
                 ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getScoreboardName()); // more info
-                this.disconnect(Component.translatable("disconnect.timeout", me.titaniumtown.Constants.EMPTY_object_arr), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause // JettPack
+                this.disconnect(Component.translatable("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
             }
         } else {
-            if (elapsedTime >= 15000L) { // 15 seconds
+            if (elapsedTime >= GlobalConfiguration.get().keepalive.sendInterval) { // Suki - configurable keepalive
                 this.keepAlivePending = true;
                 this.keepAliveTime = currentTime;
                 this.keepAliveChallenge = currentTime;
@@ -3649,11 +3653,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             this.player.latency = (this.player.latency * 3 + i) / 4;
             this.keepAlivePending = false;
         } else if (!this.isSingleplayerOwner()) {
-            // Paper start - This needs to be handled on the main thread for plugins
-            server.submit(() -> {
-            this.disconnect(Component.translatable("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
-            });
-            // Paper end
+            // Suki start - no disconnect on late or wrong keepalive
+            // Do not disconnect when keepalive challenge is wrong
+            if (!((packet.getId() == this.keepAliveChallenge || !GlobalConfiguration.get().keepalive.kick.wrongResponseId) && (this.keepAlivePending || !GlobalConfiguration.get().keepalive.kick.unexpectedResponse))) {
+                // Paper start - This needs to be handled on the main thread for plugins
+                server.submit(() -> {
+                    this.disconnect(Component.translatable("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
+                });
+                // Paper end
+            }
+            // Suki end - no disconnect on late or wrong keepalive
         }
 
     }
