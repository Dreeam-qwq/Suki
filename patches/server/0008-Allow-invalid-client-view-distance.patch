From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 21 Feb 2023 21:15:28 +0100
Subject: [PATCH] Allow invalid client view distance

License: AGPL-3.0 (https://www.gnu.org/licenses/agpl-3.0.html)
Suki - https://github.com/SuCraft/Suki

diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
index 631d26a5cf33f2c6d076cfda617810bac7e7a0ba..0566c2d406c0bfc39b90214004f6546a0a6d1bef 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
@@ -8,6 +8,22 @@ import net.minecraft.world.entity.player.ChatVisiblity;
 public record ServerboundClientInformationPacket(String language, int viewDistance, ChatVisiblity chatVisibility, boolean chatColors, int modelCustomisation, HumanoidArm mainHand, boolean textFilteringEnabled, boolean allowsListing) implements Packet<ServerGamePacketListener> {
     public static final int MAX_LANGUAGE_LENGTH = 16;
 
+    // Suki start - allow invalid client view distance
+    public static final int MAX_USED_VIEW_DISTANCE = Byte.MAX_VALUE;
+
+    public int getAcceptableViewDistance() {
+        if (viewDistance < 0) {
+            /*
+            While the type of the field is a 32-bit int here, the type used in the packet is a signed 8-bit byte,
+            so any values below 0 likely represent values above 127 in the client
+            (some mods allow view distances of 128 or higher).
+             */
+            return MAX_USED_VIEW_DISTANCE;
+        }
+        return Math.min(viewDistance, MAX_USED_VIEW_DISTANCE);
+    }
+    // Suki end - allow invalid client view distance
+
     public ServerboundClientInformationPacket(FriendlyByteBuf buf) {
         this(buf.readUtf(16), buf.readByte(), buf.readEnum(ChatVisiblity.class), buf.readBoolean(), buf.readUnsignedByte(), buf.readEnum(HumanoidArm.class), buf.readBoolean(), buf.readBoolean());
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index e57d69588826fa9248a8ea392989dbad6790f0fc..7dc034e4e093a6b91d39e089f72ebb469e0d023b 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1967,7 +1967,7 @@ public class ServerPlayer extends Player {
     public String locale = null; // CraftBukkit - add, lowercase // Paper - default to null
     public java.util.Locale adventure$locale = java.util.Locale.US; // Paper
     public void updateOptions(ServerboundClientInformationPacket packet) {
-        new com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent(getBukkitEntity(), getClientOptionMap(packet.language(), packet.viewDistance(), com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(packet.chatVisibility().name()), packet.chatColors(), new com.destroystokyo.paper.PaperSkinParts(packet.modelCustomisation()), packet.mainHand() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT, packet.allowsListing(), packet.textFilteringEnabled())).callEvent(); // Paper - settings event // Suki - dev import deobfuscation fixes
+        new com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent(getBukkitEntity(), getClientOptionMap(packet.language(), packet.getAcceptableViewDistance(), com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(packet.chatVisibility().name()), packet.chatColors(), new com.destroystokyo.paper.PaperSkinParts(packet.modelCustomisation()), packet.mainHand() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT, packet.allowsListing(), packet.textFilteringEnabled())).callEvent(); // Paper - settings event // Suki - dev import deobfuscation fixes // Suki - allow invalid client view distance
         // CraftBukkit start
         if (getMainArm() != packet.mainHand()) {
             PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(this.getBukkitEntity(), getMainArm() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT);
@@ -1985,7 +1985,7 @@ public class ServerPlayer extends Player {
         this.adventure$locale = net.kyori.adventure.translation.Translator.parseLocale(this.locale);
         this.connection.connection.channel.attr(PaperAdventure.LOCALE_ATTRIBUTE).set(this.adventure$locale);
         // Paper end
-        this.clientViewDistance = packet.viewDistance(); // Suki - dev import deobfuscation fixes
+        this.clientViewDistance = packet.getAcceptableViewDistance(); // Suki - dev import deobfuscation fixes // Suki - allow invalid client view distance
         // CraftBukkit end
         this.chatVisibility = packet.chatVisibility();
         this.canChatColor = packet.chatColors();
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index e000da425ba28330d1edcce3948d2becb39d2bd3..7f43c51c37a4056f2b4b5fe6dbd1b83492e0fffa 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -244,6 +244,7 @@ import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
 // CraftBukkit end
 
 public class ServerGamePacketListenerImpl implements ServerPlayerConnection, TickablePacketListener, ServerGamePacketListener {
@@ -3547,9 +3548,19 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
         // Paper start - do not accept invalid information
         if (packet.viewDistance() < 0) {
+            // Suki start - allow invalid client view distance
+            if (SukiGlobalConfiguration.get().viewDistance.allowInvalidClientViewDistance) {
+                if (SukiGlobalConfiguration.get().consoleLogs.invalidClientViewDistance) {
+                    LOGGER.warn(this.player.getScoreboardName() + " sent an invalid view distance: " + packet.viewDistance());
+                }
+            } else {
+                if (SukiGlobalConfiguration.get().consoleLogs.invalidClientViewDistance) {
+                    // Suki end - allow invalid client view distance
             LOGGER.warn("Disconnecting " + this.player.getScoreboardName() + " for invalid view distance: " + packet.viewDistance());
+                } // Suki start - allow invalid client view distance
             this.disconnect("Invalid client settings", PlayerKickEvent.Cause.ILLEGAL_ACTION);
             return;
+            } // Suki - allow invalid client view distance
         }
         // Paper end - do not accept invalid information
         this.player.updateOptions(packet);
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index 86b3714a850a73d1482ea63ded43a9f59da78e6e..87d7591d0abba77afc4a87f746e26500f1ea9550 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -23,6 +23,8 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
     public ConsoleLogs consoleLogs;
     public class ConsoleLogs extends ConfigurationPart {
 
+        public boolean invalidClientViewDistance = true; // Suki - allow invalid client view distance
+
         // Suki start - log login protocol
         public LoginProtocol loginProtocol;
 
@@ -43,4 +45,11 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
 
     }
 
+    public ViewDistance viewDistance;
+    public class ViewDistance extends ConfigurationPart {
+
+        public boolean allowInvalidClientViewDistance = false; // Suki start - allow invalid client view distance
+
+    }
+
 }
