From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sun, 19 Jun 2022 22:33:29 +0200
Subject: [PATCH] Custom enchantability

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Suki - https://github.com/SuCraft/Suki

diff --git a/src/main/java/net/minecraft/server/commands/EnchantCommand.java b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
index e639c0ec642910e66b1d68ae0b9208ef58d91fce..87c04efd209f3703e446c056516d037230cfdf04 100644
--- a/src/main/java/net/minecraft/server/commands/EnchantCommand.java
+++ b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
@@ -20,6 +20,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class EnchantCommand {
     private static final DynamicCommandExceptionType ERROR_NOT_LIVING_ENTITY = new DynamicCommandExceptionType((entityName) -> {
@@ -58,7 +59,7 @@ public class EnchantCommand {
                     LivingEntity livingEntity = (LivingEntity)entity;
                     ItemStack itemStack = livingEntity.getMainHandItem();
                     if (!itemStack.isEmpty()) {
-                        if (enchantment2.canEnchant(itemStack) && EnchantmentHelper.isEnchantmentCompatible(EnchantmentHelper.getEnchantments(itemStack).keySet(), enchantment2)) {
+                        if (enchantment2.canEnchant(itemStack, EnchantmentSource.ENCHANT_COMMAND) && EnchantmentHelper.isEnchantmentCompatible(EnchantmentHelper.getEnchantments(itemStack).keySet(), enchantment2)) { // Suki - custom enchantability
                             itemStack.enchant(enchantment2, level);
                             ++i;
                         } else if (targets.size() == 1) {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index a8fd91c636db42128cb68740b545c522a3c1c3f9..edd6079e24464b7854b9429973aec2fce18f0d23 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -75,6 +75,7 @@ import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.storage.loot.LootContext;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.event.entity.CreatureSpawnEvent;
@@ -1208,7 +1209,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
     protected void enchantSpawnedWeapon(RandomSource random, float power) {
         if (!this.getMainHandItem().isEmpty() && random.nextFloat() < 0.25F * power) {
-            this.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(random, this.getMainHandItem(), (int) (5.0F + power * (float) random.nextInt(18)), false));
+            this.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(random, this.getMainHandItem(), (int) (5.0F + power * (float) random.nextInt(18)), false, EnchantmentSource.SPAWNED_MOB_MAIN_HAND)); // Suki - custom enchantability
         }
 
     }
@@ -1217,7 +1218,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
         ItemStack itemstack = this.getItemBySlot(slot);
 
         if (!itemstack.isEmpty() && random.nextFloat() < 0.5F * power) {
-            this.setItemSlot(slot, EnchantmentHelper.enchantItem(random, itemstack, (int) (5.0F + power * (float) random.nextInt(18)), false));
+            this.setItemSlot(slot, EnchantmentHelper.enchantItem(random, itemstack, (int) (5.0F + power * (float) random.nextInt(18)), false, EnchantmentSource.SPAWNED_MOB_ARMOR)); // Suki - custom enchantability
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
index 3b452b960a5e5e5d6582d7b64fe034402fb5fc2b..9b6511ed0b09f0938826766d465c38b2c6fb9c99 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
@@ -14,6 +14,7 @@ import net.minecraft.world.entity.monster.Skeleton;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class SkeletonTrapGoal extends Goal {
 
@@ -97,8 +98,10 @@ public class SkeletonTrapGoal extends Goal {
                 entityskeleton.setItemSlot(EquipmentSlot.HEAD, new ItemStack(Items.IRON_HELMET));
             }
 
-            entityskeleton.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getMainHandItem()), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
-            entityskeleton.setItemSlot(EquipmentSlot.HEAD, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getItemBySlot(EquipmentSlot.HEAD)), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
+            // Suki start - custom enchantability
+            entityskeleton.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getMainHandItem()), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false, EnchantmentSource.SPAWNED_SKELETON_TRAP_MAIN_HAND));
+            entityskeleton.setItemSlot(EquipmentSlot.HEAD, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getItemBySlot(EquipmentSlot.HEAD)), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false, EnchantmentSource.SPAWNED_SKELETON_TRAP_HELMET));
+            // Suki end - custom enchantability
         }
 
         return entityskeleton;
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index abb39a5b9d9ce50dbba80661f5c63dc9f31b784a..de4498f28f612909d552bd0f32d502c8c8b1a281 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -44,6 +44,7 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.levelgen.structure.Structure;
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class VillagerTrades {
     private static final int DEFAULT_SUPPLY = 12;
@@ -225,7 +226,7 @@ public class VillagerTrades {
         @Override
         public MerchantOffer getOffer(Entity entity, RandomSource random) {
             int i = 5 + random.nextInt(15);
-            ItemStack itemStack = EnchantmentHelper.enchantItem(random, new ItemStack(this.itemStack.getItem()), i, false);
+            ItemStack itemStack = EnchantmentHelper.enchantItem(random, new ItemStack(this.itemStack.getItem()), i, false, EnchantmentSource.VILLAGER_TRADE); // Suki - custom enchantability
             int j = Math.min(this.baseEmeraldCost + i, 64);
             ItemStack itemStack2 = new ItemStack(Items.EMERALD, j);
             return new MerchantOffer(itemStack2, itemStack, this.maxUses, this.villagerXp, this.priceMultiplier);
diff --git a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
index b7a2295290227045e6426ee0f71707185d95b943..410b275edc75a23d175eae3a0cde8f07b78a26bf 100644
--- a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
@@ -14,6 +14,7 @@ import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.block.AnvilBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 
@@ -207,7 +208,7 @@ public class AnvilMenu extends ItemCombinerMenu {
                             int i2 = (Integer) map1.get(enchantment);
 
                             i2 = l1 == i2 ? i2 + 1 : Math.max(i2, l1);
-                            boolean flag3 = enchantment.canEnchant(itemstack);
+                            boolean flag3 = enchantment.canEnchant(itemstack, EnchantmentSource.ANVIL); // Suki - custom enchantability
 
                             if (this.player.getAbilities().instabuild || itemstack.is(Items.ENCHANTED_BOOK)) {
                                 flag3 = true;
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index c2fc00509bf3690d359928e8d352d4b3c2ca1491..ad522e28dc3bb20f486314851332db9b3b7a8ca7 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -26,6 +26,7 @@ import java.util.Map;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.EnchantmentInstance;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.inventory.CraftInventoryEnchanting;
@@ -315,7 +316,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
 
     private List<EnchantmentInstance> getEnchantmentList(ItemStack stack, int slot, int level) {
         this.random.setSeed((long) (this.enchantmentSeed.get() + slot));
-        List<EnchantmentInstance> list = EnchantmentHelper.selectEnchantment(this.random, stack, level, false);
+        List<EnchantmentInstance> list = EnchantmentHelper.selectEnchantment(this.random, stack, level, false, EnchantmentSource.ENCHANTING_TABLE); // Suki - custom enchantability
 
         if (stack.is(Items.BOOK) && list.size() > 1) {
             list.remove(this.random.nextInt(list.size()));
diff --git a/src/main/java/net/minecraft/world/item/enchantment/DamageEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/DamageEnchantment.java
index d6c354856c71d9629828e2ddbe316306bfaf6ea6..42788c1b16caebcad408c3b29ac4e4806b9d48e6 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/DamageEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/DamageEnchantment.java
@@ -50,10 +50,12 @@ public class DamageEnchantment extends Enchantment {
         return !(other instanceof DamageEnchantment);
     }
 
+    // Suki start - custom enchantability
     @Override
-    public boolean canEnchant(ItemStack stack) {
-        return stack.getItem() instanceof AxeItem ? true : super.canEnchant(stack);
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return stack.getItem() instanceof AxeItem ? true : super.canEnchantInVanilla(stack);
     }
+    // Suki end - custom enchantability
 
     @Override
     public void doPostAttack(LivingEntity user, Entity target, int level) {
diff --git a/src/main/java/net/minecraft/world/item/enchantment/DigDurabilityEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/DigDurabilityEnchantment.java
index cbd39863b75245f1a5a16ab49f09238c034e09d2..804de17ddb3423bbbef875391c3e9beb0c9a5a94 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/DigDurabilityEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/DigDurabilityEnchantment.java
@@ -25,10 +25,12 @@ public class DigDurabilityEnchantment extends Enchantment {
         return 3;
     }
 
+    // Suki start - custom enchantability
     @Override
-    public boolean canEnchant(ItemStack stack) {
-        return stack.isDamageableItem() ? true : super.canEnchant(stack);
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return stack.isDamageableItem() ? true : super.canEnchantInVanilla(stack);
     }
+    // Suki end - custom enchantability
 
     public static boolean shouldIgnoreDurabilityDrop(ItemStack item, int level, RandomSource random) {
         if (item.getItem() instanceof ArmorItem && random.nextFloat() < 0.6F) {
diff --git a/src/main/java/net/minecraft/world/item/enchantment/DiggingEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/DiggingEnchantment.java
index c55b492e9bcf5a9eef1bf86d9a0ada7231c459e9..1856cf3776167c8d0082eb198bcaa7fd7b04e777 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/DiggingEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/DiggingEnchantment.java
@@ -24,8 +24,11 @@ public class DiggingEnchantment extends Enchantment {
         return 5;
     }
 
+    // Suki start - custom enchantability
     @Override
-    public boolean canEnchant(ItemStack stack) {
-        return stack.is(Items.SHEARS) ? true : super.canEnchant(stack);
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return stack.is(Items.SHEARS) ? true : super.canEnchantInVanilla(stack);
     }
+    // Suki end - custom enchantability
+
 }
diff --git a/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java b/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java
index 62138ab82b60f2279877c072c2c9265e11bc9639..960844e338dd44e181ab592e02e032b94c45f1a6 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java
@@ -15,6 +15,7 @@ import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.item.ItemStack;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public abstract class Enchantment {
     public final EquipmentSlot[] slots;
@@ -110,10 +111,19 @@ public abstract class Enchantment {
         return mutableComponent;
     }
 
-    public boolean canEnchant(ItemStack stack) {
-        return this.category.canEnchant(stack.getItem());
+    // Suki start - custom enchantability
+
+    public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+        // Enchantment.canEnchantInVanilla and EnchantmentCategory.canEnchant could both be overridden
+        return this.canEnchantInVanilla(stack) || this.category.canEnchant(stack.getItem(), source);
+    }
+
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return this.category.canEnchantInVanilla(stack.getItem());
     }
 
+    // Suki end - custom enchantability
+
     public void doPostAttack(LivingEntity user, Entity target, int level) {
     }
 
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
index 246516e67db0b8b197b287c067d5a0163d8bde22..a0737644aad56bed0483851bbe27c2bbeb0de539 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
@@ -12,17 +12,18 @@ import net.minecraft.world.item.SwordItem;
 import net.minecraft.world.item.TridentItem;
 import net.minecraft.world.item.Vanishable;
 import net.minecraft.world.level.block.Block;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public enum EnchantmentCategory {
     ARMOR {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof ArmorItem;
         }
     },
     ARMOR_FEET {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             if (item instanceof ArmorItem armorItem) {
                 if (armorItem.getEquipmentSlot() == EquipmentSlot.FEET) {
                     return true;
@@ -34,7 +35,7 @@ public enum EnchantmentCategory {
     },
     ARMOR_LEGS {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             if (item instanceof ArmorItem armorItem) {
                 if (armorItem.getEquipmentSlot() == EquipmentSlot.LEGS) {
                     return true;
@@ -46,7 +47,7 @@ public enum EnchantmentCategory {
     },
     ARMOR_CHEST {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             if (item instanceof ArmorItem armorItem) {
                 if (armorItem.getEquipmentSlot() == EquipmentSlot.CHEST) {
                     return true;
@@ -58,7 +59,7 @@ public enum EnchantmentCategory {
     },
     ARMOR_HEAD {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             if (item instanceof ArmorItem armorItem) {
                 if (armorItem.getEquipmentSlot() == EquipmentSlot.HEAD) {
                     return true;
@@ -70,58 +71,73 @@ public enum EnchantmentCategory {
     },
     WEAPON {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof SwordItem;
         }
     },
     DIGGER {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof DiggerItem;
         }
     },
     FISHING_ROD {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof FishingRodItem;
         }
     },
     TRIDENT {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof TridentItem;
         }
     },
     BREAKABLE {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item.canBeDepleted();
         }
     },
     BOW {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof BowItem;
         }
     },
     WEARABLE {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof Equipable || Block.byItem(item) instanceof Equipable;
         }
     },
     CROSSBOW {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof CrossbowItem;
         }
     },
     VANISHABLE {
+        // Suki start - custom enchantability
         @Override
-        public boolean canEnchant(Item item) {
-            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || BREAKABLE.canEnchant(item);
+        public boolean canEnchant(Item item, EnchantmentSource source) {
+            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || BREAKABLE.canEnchant(item, source);
         }
+        @Override
+        public boolean canEnchantInVanilla(Item item) {
+            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || BREAKABLE.canEnchantInVanilla(item);
+        }
+        // Suki end - custom enchantability
     };
 
-    public abstract boolean canEnchant(Item item);
+    // Suki start - custom enchantability
+
+    public boolean canEnchant(Item item, EnchantmentSource source) {
+        return this.canEnchantInVanilla(item);
+    }
+
+    public abstract boolean canEnchantInVanilla(Item item);
+
+    // Suki end - custom enchantability
+
 }
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
index ecf640b00007a386290f8dfe9935a8aa610079fd..6d88b7ba0d99358d5d0c1a1bbc1b02ded9ea3895 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -26,6 +26,7 @@ import net.minecraft.world.item.EnchantedBookItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.apache.commons.lang3.mutable.MutableFloat;
 import org.apache.commons.lang3.mutable.MutableInt;
 
@@ -323,8 +324,10 @@ public class EnchantmentHelper {
         }
     }
 
-    public static ItemStack enchantItem(RandomSource random, ItemStack target, int level, boolean treasureAllowed) {
-        List<EnchantmentInstance> list = selectEnchantment(random, target, level, treasureAllowed);
+    // Suki start - custom enchantability
+    public static ItemStack enchantItem(RandomSource random, ItemStack target, int level, boolean treasureAllowed, EnchantmentSource source) {
+        List<EnchantmentInstance> list = selectEnchantment(random, target, level, treasureAllowed, source);
+        // Suki end - custom enchantability
         boolean bl = target.is(Items.BOOK);
         if (bl) {
             target = new ItemStack(Items.ENCHANTED_BOOK);
@@ -341,7 +344,7 @@ public class EnchantmentHelper {
         return target;
     }
 
-    public static List<EnchantmentInstance> selectEnchantment(RandomSource random, ItemStack stack, int level, boolean treasureAllowed) {
+    public static List<EnchantmentInstance> selectEnchantment(RandomSource random, ItemStack stack, int level, boolean treasureAllowed, EnchantmentSource source) { // Suki - custom enchantability
         List<EnchantmentInstance> list = Lists.newArrayList();
         Item item = stack.getItem();
         int i = item.getEnchantmentValue();
@@ -351,7 +354,7 @@ public class EnchantmentHelper {
             level += 1 + random.nextInt(i / 4 + 1) + random.nextInt(i / 4 + 1);
             float f = (random.nextFloat() + random.nextFloat() - 1.0F) * 0.15F;
             level = Mth.clamp(Math.round((float)level + (float)level * f), 1, Integer.MAX_VALUE);
-            List<EnchantmentInstance> list2 = getAvailableEnchantmentResults(level, stack, treasureAllowed);
+            List<EnchantmentInstance> list2 = getAvailableEnchantmentResults(level, stack, treasureAllowed, source);
             if (!list2.isEmpty()) {
                 WeightedRandom.getRandomItem(random, list2).ifPresent(list::add);
 
@@ -394,13 +397,13 @@ public class EnchantmentHelper {
         return true;
     }
 
-    public static List<EnchantmentInstance> getAvailableEnchantmentResults(int power, ItemStack stack, boolean treasureAllowed) {
+    public static List<EnchantmentInstance> getAvailableEnchantmentResults(int power, ItemStack stack, boolean treasureAllowed, EnchantmentSource source) { // Suki - custom enchantability
         List<EnchantmentInstance> list = Lists.newArrayList();
         Item item = stack.getItem();
         boolean bl = stack.is(Items.BOOK);
 
         for(Enchantment enchantment : BuiltInRegistries.ENCHANTMENT) {
-            if ((!enchantment.isTreasureOnly() || treasureAllowed) && enchantment.isDiscoverable() && (enchantment.category.canEnchant(item) || bl)) {
+            if ((!enchantment.isTreasureOnly() || treasureAllowed) && enchantment.isDiscoverable() && (enchantment.category.canEnchant(item, source) || bl)) { // Suki - custom enchantability
                 for(int i = enchantment.getMaxLevel(); i > enchantment.getMinLevel() - 1; --i) {
                     if (power >= enchantment.getMinCost(i) && power <= enchantment.getMaxCost(i)) {
                         list.add(new EnchantmentInstance(enchantment, i));
diff --git a/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java b/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
index 84f1c4c3ded4f201899f3c74e639349b9d1f00ee..22fbddc1436aa67a217dfdbd8ba58db9592692d8 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
@@ -3,42 +3,355 @@ package net.minecraft.world.item.enchantment;
 import net.minecraft.core.Registry;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.item.AxeItem;
+import net.minecraft.world.item.HoeItem;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.item.PickaxeItem;
+import net.minecraft.world.item.ShovelItem;
+import net.minecraft.world.item.SwordItem;
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class Enchantments {
 
     private static final EquipmentSlot[] ARMOR_SLOTS = new EquipmentSlot[]{EquipmentSlot.HEAD, EquipmentSlot.CHEST, EquipmentSlot.LEGS, EquipmentSlot.FEET};
-    public static final Enchantment ALL_DAMAGE_PROTECTION = Enchantments.register("protection", new ProtectionEnchantment(Enchantment.Rarity.COMMON, ProtectionEnchantment.Type.ALL, Enchantments.ARMOR_SLOTS));
-    public static final Enchantment FIRE_PROTECTION = Enchantments.register("fire_protection", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.FIRE, Enchantments.ARMOR_SLOTS));
+    // Suki start - custom enchantability
+
+    /**
+     * Can be added to elytras and shields via the enchanting table or anvil (or command)
+     */
+    public static final boolean canProtectionEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((SukiGlobalConfiguration.get().gameplayMechanics.enchantability.protection.elytra && stack.is(Items.ELYTRA)) ||
+                (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.protection.shield && stack.is(Items.SHIELD))) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to elytras and shields via the enchanting table or anvil (or command)
+     */
+    public static final boolean canThornsEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((SukiGlobalConfiguration.get().gameplayMechanics.enchantability.thorns.elytra && stack.is(Items.ELYTRA)) ||
+                (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.thorns.shield && stack.is(Items.SHIELD))) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to bows, crossbows, tridents, axes, pickaxes, shovels and hoes via the enchanting table or anvil (or command)
+     */
+    public static final boolean canLootingEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((SukiGlobalConfiguration.get().gameplayMechanics.enchantability.looting.bow && stack.is(Items.BOW)) ||
+                (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.looting.crossbow && stack.is(Items.CROSSBOW)) ||
+                (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.looting.trident && stack.is(Items.TRIDENT)) ||
+                (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.looting.axe && stack.getItem() instanceof AxeItem) ||
+                (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.looting.pickaxe && stack.getItem() instanceof PickaxeItem) ||
+                (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.looting.shovel && stack.getItem() instanceof ShovelItem) ||
+                (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.looting.hoe && stack.getItem() instanceof HoeItem)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to pickaxes, shovels and hoes via the enchanting table or anvil (or command)
+     */
+    public static final boolean canMeleeDamageEnchant(ItemStack stack, EnchantmentSource source, SukiGlobalConfiguration.GameplayMechanics.Enchantability.MeleeDamage configuration) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((configuration.pickaxe && stack.getItem() instanceof PickaxeItem) ||
+                (configuration.shovel && stack.getItem() instanceof ShovelItem) ||
+                (configuration.hoe && stack.getItem() instanceof HoeItem)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * @see #canMeleeDamageEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.GameplayMechanics.Enchantability.MeleeDamage)
+     */
+    public static final boolean canSharpnessEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeDamageEnchant(stack, source, SukiGlobalConfiguration.get().gameplayMechanics.enchantability.sharpness);
+    }
+
+    /**
+     * @see #canMeleeDamageEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.GameplayMechanics.Enchantability.MeleeDamage)
+     */
+    public static final boolean canSmiteEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeDamageEnchant(stack, source, SukiGlobalConfiguration.get().gameplayMechanics.enchantability.smite);
+    }
+
+    /**
+     * @see #canMeleeDamageEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.GameplayMechanics.Enchantability.MeleeDamage)
+     */
+    public static final boolean canBaneOfArthropodsEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeDamageEnchant(stack, source, SukiGlobalConfiguration.get().gameplayMechanics.enchantability.baneOfArthropods);
+    }
+
+    /**
+     * Can be added to axes, pickaxes, shovels and hoes via the enchanting table or anvil (or command)
+     */
+    public static final boolean canMeleeEffectEnchant(ItemStack stack, EnchantmentSource source, SukiGlobalConfiguration.GameplayMechanics.Enchantability.MeleeEffect configuration) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((configuration.axe && stack.getItem() instanceof AxeItem) ||
+                (configuration.pickaxe && stack.getItem() instanceof PickaxeItem) ||
+                (configuration.shovel && stack.getItem() instanceof ShovelItem) ||
+                (configuration.hoe && stack.getItem() instanceof HoeItem)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * @see #canMeleeEffectEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.GameplayMechanics.Enchantability.MeleeEffect)
+     */
+    public static final boolean canKnockbackEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeEffectEnchant(stack, source, SukiGlobalConfiguration.get().gameplayMechanics.enchantability.knockback);
+    }
+
+    /**
+     * @see #canMeleeEffectEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.GameplayMechanics.Enchantability.MeleeEffect)
+     */
+    public static final boolean canFireAspectEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeEffectEnchant(stack, source, SukiGlobalConfiguration.get().gameplayMechanics.enchantability.fireAspect);
+    }
+
+    /**
+     * Can be added to swords via the anvil (or command)
+     */
+    public static final boolean canEfficiencyEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.efficiency.sword && stack.getItem() instanceof SwordItem) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to swords via the anvil (or command)
+     */
+    public static final boolean canFortuneEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.fortune.sword && stack.getItem() instanceof SwordItem) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to swords via the anvil (or command)
+     */
+    public static final boolean canSilkTouchEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.silkTouch.sword && stack.getItem() instanceof SwordItem) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private static final EquipmentSlot[] ARMOR_AND_OFFHAND_SLOTS = new EquipmentSlot[]{EquipmentSlot.HEAD, EquipmentSlot.CHEST, EquipmentSlot.LEGS, EquipmentSlot.FEET, EquipmentSlot.OFFHAND};
+    public static final Enchantment ALL_DAMAGE_PROTECTION = Enchantments.register("protection", new ProtectionEnchantment(Enchantment.Rarity.COMMON, ProtectionEnchantment.Type.ALL, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canProtectionEnchant(stack, source);
+        }
+    });
+    public static final Enchantment FIRE_PROTECTION = Enchantments.register("fire_protection", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.FIRE, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canProtectionEnchant(stack, source);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment FALL_PROTECTION = Enchantments.register("feather_falling", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.FALL, Enchantments.ARMOR_SLOTS));
-    public static final Enchantment BLAST_PROTECTION = Enchantments.register("blast_protection", new ProtectionEnchantment(Enchantment.Rarity.RARE, ProtectionEnchantment.Type.EXPLOSION, Enchantments.ARMOR_SLOTS));
-    public static final Enchantment PROJECTILE_PROTECTION = Enchantments.register("projectile_protection", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.PROJECTILE, Enchantments.ARMOR_SLOTS));
+    // Suki start - custom enchantability
+    public static final Enchantment BLAST_PROTECTION = Enchantments.register("blast_protection", new ProtectionEnchantment(Enchantment.Rarity.RARE, ProtectionEnchantment.Type.EXPLOSION, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canProtectionEnchant(stack, source);
+        }
+    });
+    public static final Enchantment PROJECTILE_PROTECTION = Enchantments.register("projectile_protection", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.PROJECTILE, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canProtectionEnchant(stack, source);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment RESPIRATION = Enchantments.register("respiration", new OxygenEnchantment(Enchantment.Rarity.RARE, Enchantments.ARMOR_SLOTS));
     public static final Enchantment AQUA_AFFINITY = Enchantments.register("aqua_affinity", new WaterWorkerEnchantment(Enchantment.Rarity.RARE, Enchantments.ARMOR_SLOTS));
-    public static final Enchantment THORNS = Enchantments.register("thorns", new ThornsEnchantment(Enchantment.Rarity.VERY_RARE, Enchantments.ARMOR_SLOTS));
+    // Suki start - custom enchantability
+    public static final Enchantment THORNS = Enchantments.register("thorns", new ThornsEnchantment(Enchantment.Rarity.VERY_RARE, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canThornsEnchant(stack, source);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment DEPTH_STRIDER = Enchantments.register("depth_strider", new WaterWalkerEnchantment(Enchantment.Rarity.RARE, Enchantments.ARMOR_SLOTS));
     public static final Enchantment FROST_WALKER = Enchantments.register("frost_walker", new FrostWalkerEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.FEET}));
     public static final Enchantment BINDING_CURSE = Enchantments.register("binding_curse", new BindingCurseEnchantment(Enchantment.Rarity.VERY_RARE, Enchantments.ARMOR_SLOTS));
     public static final Enchantment SOUL_SPEED = Enchantments.register("soul_speed", new SoulSpeedEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.FEET}));
     public static final Enchantment SWIFT_SNEAK = Enchantments.register("swift_sneak", new SwiftSneakEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.LEGS}));
-    public static final Enchantment SHARPNESS = Enchantments.register("sharpness", new DamageEnchantment(Enchantment.Rarity.COMMON, 0, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment SMITE = Enchantments.register("smite", new DamageEnchantment(Enchantment.Rarity.UNCOMMON, 1, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment BANE_OF_ARTHROPODS = Enchantments.register("bane_of_arthropods", new DamageEnchantment(Enchantment.Rarity.UNCOMMON, 2, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment KNOCKBACK = Enchantments.register("knockback", new KnockbackEnchantment(Enchantment.Rarity.UNCOMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment FIRE_ASPECT = Enchantments.register("fire_aspect", new FireAspectEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment MOB_LOOTING = Enchantments.register("looting", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.WEAPON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment SHARPNESS = Enchantments.register("sharpness", new DamageEnchantment(Enchantment.Rarity.COMMON, 0, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canSharpnessEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Incompatible with Impaling
+            if (other == Enchantments.IMPALING) {
+                return false;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    public static final Enchantment SMITE = Enchantments.register("smite", new DamageEnchantment(Enchantment.Rarity.UNCOMMON, 1, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canSmiteEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Incompatible with Impaling
+            if (other == Enchantments.IMPALING) {
+                return false;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    public static final Enchantment BANE_OF_ARTHROPODS = Enchantments.register("bane_of_arthropods", new DamageEnchantment(Enchantment.Rarity.UNCOMMON, 2, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canBaneOfArthropodsEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Incompatible with Impaling
+            if (other == Enchantments.IMPALING) {
+                return false;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    public static final Enchantment KNOCKBACK = Enchantments.register("knockback", new KnockbackEnchantment(Enchantment.Rarity.UNCOMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canKnockbackEnchant(stack, source) ||
+                // Can spawn on top of pickaxes in generated loot or as a weapon held by mobs
+                ((source == EnchantmentSource.GENERATED_LOOT || source == EnchantmentSource.SPAWNED_MOB_MAIN_HAND || source == EnchantmentSource.SPAWNED_SKELETON_TRAP_MAIN_HAND) && (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.knockback.pickaxe && stack.getItem() instanceof PickaxeItem)) ||
+                // Can spawn on top of shovels as a weapon held by mobs
+                ((source == EnchantmentSource.SPAWNED_MOB_MAIN_HAND || source == EnchantmentSource.SPAWNED_SKELETON_TRAP_MAIN_HAND) && (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.knockback.shovel && stack.getItem() instanceof ShovelItem));
+        }
+    });
+    public static final Enchantment FIRE_ASPECT = Enchantments.register("fire_aspect", new FireAspectEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canFireAspectEnchant(stack, source) ||
+                // Can spawn on top of shovels in generated loot or as a weapon held by mobs
+                ((source == EnchantmentSource.GENERATED_LOOT || source == EnchantmentSource.SPAWNED_MOB_MAIN_HAND || source == EnchantmentSource.SPAWNED_SKELETON_TRAP_MAIN_HAND) && (SukiGlobalConfiguration.get().gameplayMechanics.enchantability.fireAspect.shovel && stack.getItem() instanceof ShovelItem));
+        }
+    });
+    public static final Enchantment MOB_LOOTING = Enchantments.register("looting", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.WEAPON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canLootingEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Compatible with Silk Touch and Fortune
+            if (other == Enchantments.SILK_TOUCH || other == Enchantments.BLOCK_FORTUNE) {
+                return true;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment SWEEPING_EDGE = Enchantments.register("sweeping", new SweepingEdgeEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment BLOCK_EFFICIENCY = Enchantments.register("efficiency", new DiggingEnchantment(Enchantment.Rarity.COMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment SILK_TOUCH = Enchantments.register("silk_touch", new UntouchingEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment BLOCK_EFFICIENCY = Enchantments.register("efficiency", new DiggingEnchantment(Enchantment.Rarity.COMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canEfficiencyEnchant(stack, source);
+        }
+    });
+    public static final Enchantment SILK_TOUCH = Enchantments.register("silk_touch", new UntouchingEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canSilkTouchEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Compatible with Looting and Luck of the Sea
+            if (other == Enchantments.MOB_LOOTING || other == Enchantments.FISHING_LUCK) {
+                return true;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment UNBREAKING = Enchantments.register("unbreaking", new DigDurabilityEnchantment(Enchantment.Rarity.UNCOMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment BLOCK_FORTUNE = Enchantments.register("fortune", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.DIGGER, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment BLOCK_FORTUNE = Enchantments.register("fortune", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.DIGGER, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canFortuneEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Compatible with Looting and Luck of the Sea
+            if (other == Enchantments.MOB_LOOTING || other == Enchantments.FISHING_LUCK) {
+                return true;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment POWER_ARROWS = Enchantments.register("power", new ArrowDamageEnchantment(Enchantment.Rarity.COMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment PUNCH_ARROWS = Enchantments.register("punch", new ArrowKnockbackEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment FLAMING_ARROWS = Enchantments.register("flame", new ArrowFireEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment INFINITY_ARROWS = Enchantments.register("infinity", new ArrowInfiniteEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment FISHING_LUCK = Enchantments.register("luck_of_the_sea", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.FISHING_ROD, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment FISHING_LUCK = Enchantments.register("luck_of_the_sea", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.FISHING_ROD, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Compatible with Silk Touch and Fortune
+            if (other == Enchantments.SILK_TOUCH || other == Enchantments.BLOCK_FORTUNE) {
+                return true;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment FISHING_SPEED = Enchantments.register("lure", new FishingSpeedEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.FISHING_ROD, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment LOYALTY = Enchantments.register("loyalty", new TridentLoyaltyEnchantment(Enchantment.Rarity.UNCOMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment IMPALING = Enchantments.register("impaling", new TridentImpalerEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment IMPALING = Enchantments.register("impaling", new TridentImpalerEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Incompatible with Sharpness, Smite and Bane of Arthropods
+            if (other == Enchantments.SHARPNESS || other == Enchantments.SMITE || other == Enchantments.BANE_OF_ARTHROPODS) {
+                return false;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment RIPTIDE = Enchantments.register("riptide", new TridentRiptideEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment CHANNELING = Enchantments.register("channeling", new TridentChannelingEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment MULTISHOT = Enchantments.register("multishot", new MultiShotEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
diff --git a/src/main/java/net/minecraft/world/item/enchantment/ThornsEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/ThornsEnchantment.java
index 618d645e71762ec8279640a60ea00460809bba63..0668ee3ec236ea456663e0c224af4702365716a0 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/ThornsEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/ThornsEnchantment.java
@@ -30,10 +30,12 @@ public class ThornsEnchantment extends Enchantment {
         return 3;
     }
 
+    // Suki start - custom enchantability
     @Override
-    public boolean canEnchant(ItemStack stack) {
-        return stack.getItem() instanceof ArmorItem ? true : super.canEnchant(stack);
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return stack.getItem() instanceof ArmorItem ? true : super.canEnchantInVanilla(stack);
     }
+    // Suki end - custom enchantability
 
     @Override
     public void doPostHurt(LivingEntity user, Entity attacker, int level) {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index 64d7c11d8895f4630d480b8bd7b9f6c88fa6d58d..8614f89bcb998b7cda51a26b69dfebab7302aeec 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -27,6 +27,7 @@ import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentInstance;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.slf4j.Logger;
 
 public class EnchantRandomlyFunction extends LootItemConditionalFunction {
@@ -49,10 +50,10 @@ public class EnchantRandomlyFunction extends LootItemConditionalFunction {
         Enchantment enchantment;
         if (this.enchantments.isEmpty()) {
             boolean bl = stack.is(Items.BOOK);
-            // Suki start - dev import deobfuscation fixes
+            // Suki start - Suki imports decompilation fixes
             List<Enchantment> list = BuiltInRegistries.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((registeredDiscoverableEnchantment) -> {
-                return bl || registeredDiscoverableEnchantment.canEnchant(stack);
-            // Suki end - dev import deobfuscation fixes
+                return bl || registeredDiscoverableEnchantment.canEnchant(stack, EnchantmentSource.GENERATED_LOOT); // Suki - custom enchantability
+            // Suki end - Suki imports decompilation fixes
             }).collect(Collectors.toList());
             if (list.isEmpty()) {
                 LOGGER.warn("Couldn't find a compatible enchantment for {}", (Object)stack);
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java
index acaeecd0abb972c461c2302c9c011b3c2052e497..e40d9235c7bcd76999797ec122fa06cec1b1b245 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java
@@ -12,6 +12,7 @@ import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import net.minecraft.world.level.storage.loot.providers.number.NumberProvider;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class EnchantWithLevelsFunction extends LootItemConditionalFunction {
     final NumberProvider levels;
@@ -36,7 +37,7 @@ public class EnchantWithLevelsFunction extends LootItemConditionalFunction {
     @Override
     public ItemStack run(ItemStack stack, LootContext context) {
         RandomSource randomSource = context.getRandom();
-        return EnchantmentHelper.enchantItem(randomSource, stack, this.levels.getInt(context), this.treasure);
+        return EnchantmentHelper.enchantItem(randomSource, stack, this.levels.getInt(context), this.treasure, EnchantmentSource.GENERATED_LOOT); // Suki - custom enchantability
     }
 
     public static EnchantWithLevelsFunction.Builder enchantWithLevels(NumberProvider range) {
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index 3d0ce0803e1da8a2681a3cb41096ac942ece54a1..df09308506ba25fa896c7658aa7c8e3e39ab8fc5 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.enchantments;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.item.enchantment.BindingCurseEnchantment;
 import net.minecraft.world.item.enchantment.VanishingCurseEnchantment;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.enchantments.Enchantment;
@@ -74,11 +75,20 @@ public class CraftEnchantment extends Enchantment {
         return this.target.isCurse(); // Paper
     }
 
+    // Suki start - custom enchantability
+
     @Override
-    public boolean canEnchantItem(ItemStack item) {
-        return this.target.canEnchant(CraftItemStack.asNMSCopy(item));
+    public boolean canEnchantItem(ItemStack item, EnchantmentSource source) {
+        return this.target.canEnchant(CraftItemStack.asNMSCopy(item), source);
     }
 
+    @Override
+    public boolean canEnchantItemInVanilla(ItemStack item) {
+        return this.target.canEnchantInVanilla(CraftItemStack.asNMSCopy(item));
+    }
+
+    // Suki end - custom enchantability
+
     @Override
     public String getName() {
         // PAIL: migration paths
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 83bbfe1ffd0dc8e168064225a02abcaa49df60ed..6adb4d488420ac8c086c8d724615b1c4f3cab37b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -7,6 +7,7 @@ import net.minecraft.core.HolderLookup;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.item.Item;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.Material;
@@ -419,20 +420,29 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     // Paper start
+
+    // Suki start - custom enchantability
     @Override
     public ItemStack enchantWithLevels(ItemStack itemStack, int levels, boolean allowTreasure, java.util.Random random) {
+        return this.enchantWithLevels(itemStack, levels, allowTreasure, random, EnchantmentSource.BUKKIT_API);
+    }
+
+    @Override
+    public ItemStack enchantWithLevels(ItemStack itemStack, int levels, boolean allowTreasure, java.util.Random random, EnchantmentSource source) {
         Validate.notNull(itemStack, "Argument 'itemStack' must not be null");
         Validate.isTrue(itemStack.getType() != Material.AIR, "Argument 'itemStack' must not be of type AIR");
         Validate.isTrue(itemStack.getAmount() > 0, "Argument 'itemStack' amount must be greater than 0");
         Validate.isTrue(levels > 0 && levels <= 30, "Argument 'levels' must be in range [1, 30] (attempted " + levels + ")");
         Validate.notNull(random, "Argument 'random' must not be null");
+        Validate.notNull(source, "Argument 'source' must not be null");
         final net.minecraft.world.item.ItemStack internalStack = CraftItemStack.asNMSCopy(itemStack);
         if (internalStack.getTag() != null) {
             internalStack.getTag().remove(net.minecraft.world.item.ItemStack.TAG_ENCH);
         }
-        final net.minecraft.world.item.ItemStack enchanted = net.minecraft.world.item.enchantment.EnchantmentHelper.enchantItem(new org.bukkit.craftbukkit.util.RandomSourceWrapper(random), internalStack, levels, allowTreasure);
+        final net.minecraft.world.item.ItemStack enchanted = net.minecraft.world.item.enchantment.EnchantmentHelper.enchantItem(new org.bukkit.craftbukkit.util.RandomSourceWrapper(random), internalStack, levels, allowTreasure, source);
         return CraftItemStack.asCraftMirror(enchanted);
     }
+    // Suki end - custom enchantability
 
     @Override
     public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final ItemStack item, final java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index 4c869b3915a4de99b1d0c03ddd0edf18bf1145d6..fbde70feef055b757717ea60f99e3856d780569a 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -67,6 +67,98 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
         }
         // Suki end - survival debug stick
 
+        // Suki start - custom enchantability
+        public Enchantability enchantability;
+        public class Enchantability extends ConfigurationPart {
+
+            public Protection protection;
+            public class Protection extends ConfigurationPart {
+
+                public boolean elytra = false;
+
+                /**
+                 * Not functional yet
+                 */
+                public transient boolean shield = false;
+
+            }
+
+            public Thorns thorns;
+            public class Thorns extends ConfigurationPart {
+
+                public boolean elytra = false;
+
+                /**
+                 * Not functional yet
+                 */
+                public transient boolean shield = false;
+
+            }
+
+            public Looting looting;
+            public class Looting extends ConfigurationPart {
+
+                public boolean bow = false;
+                public boolean crossbow = false;
+                public boolean trident = false;
+                public boolean axe = false;
+                public boolean pickaxe = false;
+                public boolean shovel = false;
+                public boolean hoe = false;
+
+            }
+
+            public Sharpness sharpness;
+            public Smite smite;
+            public BaneOfArthropods baneOfArthropods;
+
+            public class Sharpness extends MeleeDamage {}
+
+            public class Smite extends MeleeDamage {}
+
+            public class BaneOfArthropods extends MeleeDamage {}
+
+            public abstract class MeleeDamage extends ConfigurationPart {
+
+                public boolean pickaxe = false;
+                public boolean shovel = false;
+                public boolean hoe = false;
+
+            }
+
+            public Knockback knockback;
+            public FireAspect fireAspect;
+
+            public class Knockback extends MeleeEffect {}
+
+            public class FireAspect extends MeleeEffect {}
+
+            public abstract class MeleeEffect extends ConfigurationPart {
+
+                public boolean axe = false;
+                public boolean pickaxe = false;
+                public boolean shovel = false;
+                public boolean hoe = false;
+
+            }
+
+            public Efficiency efficiency;
+            public Fortune fortune;
+            public SilkTouch silkTouch;
+
+            public class Efficiency extends AdditionalSwordEnchantment {}
+
+            public class Fortune extends AdditionalSwordEnchantment {}
+
+            public class SilkTouch extends AdditionalSwordEnchantment {}
+
+            public abstract class AdditionalSwordEnchantment extends ConfigurationPart {
+                public boolean sword = false;
+            }
+
+        }
+        // Suki end - custom enchantability
+
     }
 
     public Misc misc;
diff --git a/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java b/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java
index 5d3b8ba99d0fe966b7329540d61825aa266c7e64..1c737789da1d9995f87974d77b5f638068191940 100644
--- a/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java
+++ b/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java
@@ -32,7 +32,7 @@ public class EnchantmentTargetTest extends AbstractTestingBase { // Paper
             for (Item item : BuiltInRegistries.ITEM) {
                 Material material = CraftMagicNumbers.getMaterial(item);
 
-                boolean nms = nmsSlot.canEnchant(item);
+                boolean nms = nmsSlot.canEnchantInVanilla(item);  // Suki - custom enchantability
                 boolean bukkit = bukkitTarget.includes(material);
 
                 Assert.assertEquals("Slot mismatch for " + bukkitTarget + " and " + material, nms, bukkit);
