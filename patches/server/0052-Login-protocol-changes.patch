From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Mon, 3 Oct 2022 16:46:09 +0200
Subject: [PATCH] Login protocol changes


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index dc353b347fee6a5aa81ba8c39df7dd49bb1b0abb..d137b42dae2c16c92b0e3453dff3a5b17944abf2 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -460,6 +460,41 @@ public class GlobalConfiguration extends ConfigurationPart {
 
     // Suki end - configurable TPS catch-up time
 
+    // Suki start - login protocol
+
+    public LoginProtocol loginProtocol;
+
+    public class LoginProtocol extends ConfigurationPart {
+
+        public LogToConsole logToConsole;
+
+        public class LogToConsole extends ConfigurationPart {
+
+            public Packets packets;
+
+            public class Packets extends ConfigurationPart {
+
+                public boolean handshake = false; // Suki - login protocol - log handshakes to console
+                public boolean loginStart = false; // Suki - login protocol - log Login Start packets to console
+                public boolean setCompression = false; // Suki - login protocol - log Set Compression packets to console
+
+            }
+
+        }
+
+        // Suki start - login protocol - configurable slow login timeout
+        /**
+         * In ticks
+         */
+        public int slowLoginTimeout = 600;
+        // Suki end - login protocol - configurable slow login timeout
+
+
+
+    }
+
+    // Suki end - login protocol
+
     public Messages messages;
 
     public class Messages extends ConfigurationPart {
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 4069ef0030d66e1186afe5066030cb7b3f19a002..958745e0db737d5d331e8ded3255f4192511d15d 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -241,6 +241,12 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     }
     // Paper end - packet limiter
 
+    // Suki start - login protocol - client-provided UUID API
+
+    public @Nullable UUID lastReceivedLoginStartUUID = null;
+
+    // Suki end - login protocol - client-provided UUID API
+
     public Connection(PacketFlow side) {
         this.receiving = side;
     }
@@ -1145,8 +1151,13 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
             }
 //            MinecraftServer.LOGGER.info("While loop exit");
 
-            if (packetsToSendAndCallbacksToExecute != null) {
-                packetsToSendAndCallbacksToExecuteLater.addAll(packetsToSendAndCallbacksToExecute);
+            queuedPacketsLock.lock();
+            try {
+                if (packetsToSendAndCallbacksToExecute != null) {
+                    packetsToSendAndCallbacksToExecuteLater.addAll(packetsToSendAndCallbacksToExecute);
+                }
+            } finally {
+                queuedPacketsLock.unlock();
             }
 
         };
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 63479e24d2d28f275d05485e15c798c0b1a4cca7..ce24922d05c365a535fa8257199c135983a26d80 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2902,6 +2902,15 @@ public class ServerPlayer extends Player {
         return this.getBukkitEntity().getScoreboard().getHandle();
     }
 
+    // Suki start - login protocol - client-provided UUID API
+
+    @Nullable
+    public UUID getClientProvidedUUID() {
+        return this.connection.connection.lastReceivedLoginStartUUID;
+    }
+
+    // Suki end - login protocol - client-provided UUID API
+
     public void reset() {
         float exp = 0;
         boolean keepInventory = this.level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY);
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index ac254e4fe3973a8cb3321e96c651847e387d9f0e..f9599a1afeeccaa79b9521fa28a414eb3b8228ca 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -1,5 +1,7 @@
 package net.minecraft.server.network;
 
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.configuration.GlobalConfiguration;
 import net.minecraft.SharedConstants;
 import net.minecraft.network.Connection;
 import net.minecraft.network.ConnectionProtocol;
@@ -17,6 +19,8 @@ import java.net.InetAddress;
 // Dionysus start
 import it.unimi.dsi.fastutil.objects.Object2LongMap;
 import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
+import org.slf4j.Logger;
+
 import java.util.Iterator;
 import java.util.Map;
 // Dionysus end
@@ -36,6 +40,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
     private final MinecraftServer server;
     private final Connection connection;
     private static final boolean BYPASS_HOSTCHECK = Boolean.getBoolean("Paper.bypassHostCheck"); // Paper
+    private static final Logger LOGGER = LogUtils.getLogger(); // Suki - login protocol - log handshakes to console
 
     public ServerHandshakePacketListenerImpl(MinecraftServer server, Connection connection) {
         this.server = server;
@@ -47,6 +52,11 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
         switch (packet.getIntention()) {
             case LOGIN:
                 this.connection.setProtocol(ConnectionProtocol.LOGIN);
+                // Suki start - login protocol - log handshakes to console
+                if (GlobalConfiguration.get().loginProtocol.logToConsole.packets.handshake) {
+                    ServerHandshakePacketListenerImpl.LOGGER.info("Received handshake packet from '" + this.connection.getRemoteAddress() + "': host name = '" + packet.getHostName() + "', port = " + packet.getPort() + ", protocol version = " + packet.getProtocolVersion());
+                }
+                // Suki end - login protocol - log handshakes to console
                 // CraftBukkit start - Connection throttle
                 try {
                     if (!(this.connection.channel.localAddress() instanceof io.netty.channel.unix.DomainSocketAddress)) { // Paper - the connection throttle is useless when you have a Unix domain socket
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 03f17e568d41f5a4ac3c4bcb72e2fc39a02d7cd5..0cfc83b7e674af0508f2f25413a48e773f0e775d 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -10,11 +10,14 @@ import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.security.PrivateKey;
 import java.time.Duration;
+import java.util.Optional;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
+
+import io.papermc.paper.configuration.GlobalConfiguration;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.core.UUIDUtil;
 import net.minecraft.network.Connection;
@@ -101,7 +104,7 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
             }
         }
 
-        if (this.tick++ == 600) {
+        if (this.tick++ == GlobalConfiguration.get().loginProtocol.slowLoginTimeout) { // Suki - login protocol - configurable slow login timeout
             this.disconnect(Component.translatable("multiplayer.disconnect.slow_login"));
         }
 
@@ -196,6 +199,11 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
         } else {
             this.state = ServerLoginPacketListenerImpl.State.ACCEPTED;
             if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
+                // Suki start - login protocol - log Set Compression packets to console
+                if (GlobalConfiguration.get().loginProtocol.logToConsole.packets.setCompression) {
+                    ServerLoginPacketListenerImpl.LOGGER.info("Sent set compression packet to '" + this.connection.getRemoteAddress() + "' (with player = '" + s.getName() + "'): compression threshold = " + this.server.getCompressionThreshold());
+                }
+                // Suki end - login protocol - log Set Compression packets to console
                 this.connection.send(new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()), PacketSendListener.thenRun(() -> {
                     this.connection.setupCompression(this.server.getCompressionThreshold(), true);
                 }));
@@ -293,10 +301,20 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
         this.profilePublicKeyData = (ProfilePublicKey.Data) packet.publicKey().orElse(null); // CraftBukkit - decompile error
         GameProfile gameprofile = this.server.getSingleplayerProfile();
 
+        // Suki start - login protocol - log Login Start packets to console
+        if (GlobalConfiguration.get().loginProtocol.logToConsole.packets.loginStart) {
+            ServerLoginPacketListenerImpl.LOGGER.info("Received login start packet from '" + this.connection.getRemoteAddress() + "': name = " + Optional.ofNullable(packet.name()).map(name -> "'" + name + "'").orElse("(none)") + ", UUID = " + Optional.ofNullable(packet.profileId()).flatMap($ -> $).map(UUID::toString).orElse("(none)") + ", public key present = " + Optional.ofNullable(packet.publicKey()).flatMap($ -> $).isPresent());
+        }
+        // Suki end - login protocol - log Login Start packets to console
+
         if (gameprofile != null && packet.name().equalsIgnoreCase(gameprofile.getName())) {
             this.gameProfile = gameprofile;
             this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
         } else {
+            // Suki start - login protocol - client-provided UUID API
+            //noinspection ConstantConditions
+            this.connection.lastReceivedLoginStartUUID = Optional.ofNullable(packet.profileId()).flatMap($ -> $).orElse(null);
+            // Suki end - login protocol - client-provided UUID API
             this.gameProfile = new GameProfile((UUID) null, packet.name());
             if (this.server.usesAuthentication() && !this.connection.isMemoryConnection()) {
                 this.state = ServerLoginPacketListenerImpl.State.KEY;
@@ -441,7 +459,7 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
 
                         // Paper start
                         com.destroystokyo.paper.profile.PlayerProfile profile = com.destroystokyo.paper.profile.CraftPlayerProfile.asBukkitMirror(ServerLoginPacketListenerImpl.this.gameProfile);
-                        AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, rawAddress, uniqueId, profile, ServerLoginPacketListenerImpl.this.hostname); // Paper - add rawAddress & hostname
+                        AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, rawAddress, uniqueId, profile, ServerLoginPacketListenerImpl.this.hostname, ServerLoginPacketListenerImpl.this.connection.lastReceivedLoginStartUUID); // Paper - add rawAddress & hostname // Suki - login protocol - client-provided UUID API
                         server.getPluginManager().callEvent(asyncEvent);
                         profile = asyncEvent.getPlayerProfile();
                         profile.complete(true); // Paper - setPlayerProfileAPI
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 35cf8aca936df9bcb68f983df81f3e6cb1509758..a75c1d567e44e5a1087823bcc652228e34bb34e6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1851,6 +1851,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
+    // Suki start - login protocol - client-provided UUID API
+
+    @Override
+    @Nullable
+    public UUID getClientProvidedUUID() {
+        return this.getHandle().getClientProvidedUUID();
+    }
+
+    // Suki end - login protocol - client-provided UUID API
+
     public void onEntityRemove(Entity entity) {
         this.hiddenEntities.remove(entity.getUUID());
     }
