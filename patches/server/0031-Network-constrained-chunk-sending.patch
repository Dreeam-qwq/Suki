From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sat, 25 Feb 2023 21:53:21 +0100
Subject: [PATCH] Network-constrained chunk sending

License: AGPL-3.0 (https://www.gnu.org/licenses/agpl-3.0.html)
Suki - https://github.com/SuCraft/Suki

diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index 345c6e49ba306b081ffb741703aa91b7fc9c2bca..364cc7695cd079a14993f753f8bfc8a9410de3ad 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -22,6 +22,8 @@ import net.minecraft.world.level.chunk.LevelChunk;
 import org.apache.commons.lang3.mutable.MutableObject;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.entity.Player;
+import org.sucraft.suki.chunk.PlayerNetworkConstrainedChunksStatus;
+
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -84,11 +86,23 @@ public final class PlayerChunkLoader {
         return Integer.compare(System.identityHashCode(p1), System.identityHashCode(p2));
     });
 
-    protected final TreeSet<PlayerLoaderData> chunkSendWaitQueue = new TreeSet<>((final PlayerLoaderData p1, final PlayerLoaderData p2) -> {
+    // Suki start - network-constrained chunk sending
+    protected TreeSet<PlayerLoaderData> createSendWaitQueue() {
+        return new TreeSet<>((final PlayerLoaderData p1, final PlayerLoaderData p2) -> {
+        // Suki end - network-constrained chunk sending
         if (p1 == p2) {
             return 0;
         }
 
+        // Suki start - network-constrained chunk sending - allow instant send if network has capacity
+        boolean p1HasNetworkCapacity = p1.player.constrainedChunksStatus.canSendChunkInitializationPacketNow(null);
+        boolean p2HasNetworkCapacity = p2.player.constrainedChunksStatus.canSendChunkInitializationPacketNow(null);
+        int hasCapacityCompare = -Boolean.compare(p1HasNetworkCapacity, p2HasNetworkCapacity);
+        if (hasCapacityCompare != 0) {
+            return hasCapacityCompare;
+        }
+        // Suki end - network-constrained chunk sending - allow instant send if network has capacity
+
         final int timeCompare = Long.compare(p1.nextChunkSendTarget - p2.nextChunkSendTarget, 0);
         if (timeCompare != 0) {
             return timeCompare;
@@ -103,7 +117,12 @@ public final class PlayerChunkLoader {
         // last resort
         return Integer.compare(System.identityHashCode(p1), System.identityHashCode(p2));
     });
+    // Suki start - network-constrained chunk sending
+    }
 
+    protected final TreeSet<PlayerLoaderData> transmittingWaitQueue = createSendWaitQueue();
+    protected final TreeSet<PlayerLoaderData> chunkSendWaitQueue = createSendWaitQueue();
+    // Suki end - network-constrained chunk sending
 
     // no throttling is applied below this VD for loading
 
@@ -438,6 +457,7 @@ public final class PlayerChunkLoader {
         loaderData.remove();
         this.chunkLoadQueue.remove(loaderData);
         this.chunkSendQueue.remove(loaderData);
+        this.transmittingWaitQueue.remove(loaderData); // Suki - network-constrained chunk sending
         this.chunkSendWaitQueue.remove(loaderData);
         synchronized (this.sendingChunkCounts) {
             final int count = this.sendingChunkCounts.removeInt(loaderData);
@@ -478,12 +498,36 @@ public final class PlayerChunkLoader {
         if (nextChunkSend - time > 0) {
             return;
         }
+        // Suki start - network-constrained chunk sending
+        // drain entries from busy transmitting wait queue
+        Iterator<PlayerLoaderData> transmittingWaitQueueIterator = this.transmittingWaitQueue.iterator();
+        while (transmittingWaitQueueIterator.hasNext()) {
+            PlayerLoaderData data = transmittingWaitQueueIterator.next();
+            ChunkPriorityHolder firstQueuedSend;
+            {
+                var trackSendQueue = data.getSendQueue(true);
+                firstQueuedSend = trackSendQueue.isEmpty() ? null : trackSendQueue.first();
+            }
+            if (firstQueuedSend == null) {
+                var seeSendQueue = data.getSendQueue(false);
+                firstQueuedSend = seeSendQueue.isEmpty() ? null : seeSendQueue.first();
+            }
+            if (firstQueuedSend != null) {
+                if (data.player.constrainedChunksStatus.canSendChunkInitializationPacketNow(new ChunkPos(firstQueuedSend.chunkX, firstQueuedSend.chunkZ))) {
+                    transmittingWaitQueueIterator.remove();
+                    this.chunkSendWaitQueue.add(data);
+                }
+            }
+        }
+        // Suki end - network-constrained chunk sending
         // drain entries from wait queue
         while (!this.chunkSendWaitQueue.isEmpty()) {
             final PlayerLoaderData data = this.chunkSendWaitQueue.first();
 
             if (data.nextChunkSendTarget - time > 0) {
+                if (data.player.constrainedChunksStatus.canSendChunkInitializationPacketNow(null)) { // Suki - network-constrained chunk sending - allow instant send if network has capacity
                 break;
+                } // Suki - network-constrained chunk sending - allow instant send if network has capacity
             }
 
             this.chunkSendWaitQueue.pollFirst();
@@ -515,10 +559,16 @@ public final class PlayerChunkLoader {
             final PlayerLoaderData data = this.chunkSendQueue.removeFirst();
 
             // Suki start - per-player track and see view distance
-            ChunkPriorityHolder queuedSend = data.getSendQueue(true).pollFirst();
+            // Suki start - network-constrained chunk sending
+            var trackSendQueue = data.getSendQueue(true);
+            ChunkPriorityHolder queuedSend = trackSendQueue.isEmpty() ? null : trackSendQueue.pollFirst();
+            // Suki end - network-constrained chunk sending
             boolean concernsTracking = true;
             if (queuedSend == null) {
-                queuedSend = data.getSendQueue(false).pollFirst();
+                // Suki start - network-constrained chunk sending
+                var seeSendQueue = data.getSendQueue(false);
+                queuedSend = seeSendQueue.isEmpty() ? null : seeSendQueue.pollFirst();
+                // Suki end - network-constrained chunk sending
                 concernsTracking = false;
             }
             // Suki end - per-player track and see view distance
@@ -537,7 +587,7 @@ public final class PlayerChunkLoader {
             }
 
             data.nextChunkSendTarget = nextPlayerDeadline;
-            this.chunkSendWaitQueue.add(data);
+            this.transmittingWaitQueue.add(data); // Suki - network-constrained chunk sending
 
             synchronized (this.sendingChunkCounts) {
                 this.sendingChunkCounts.addTo(data, 1);
@@ -938,6 +988,7 @@ public final class PlayerChunkLoader {
         // Suki start - per-player view distance
         public void update(boolean recalculateMapsIfOnlyViewDistanceChanged) { // Only recalculate the chunk loading maps if only the view distance changed in specific scenarios (world change, tick) and not every time the player moves (in which case we will still update the chunk loading maps if the player moved to a different chunk, of course)
             this.player.level.timings.playerChunkLoaderUpdate.startTiming(); try {
+            this.player.constrainedChunksStatus.removeOverdueChunkInitializationPacketsInTransit(); // Suki - network-constrained chunk sending
             this.player.level.timings.playerChunkLoaderUpdateGetViewDistances.startTiming();
             final int loadViewDistance = this.player.getLoadViewDistance();
             // load view cannot be less-than tick view + 1
@@ -959,7 +1010,7 @@ public final class PlayerChunkLoader {
                     this.player.getAbilities().flying);
 
             // make sure we're in the send queue
-            this.loader.chunkSendWaitQueue.add(this);
+            this.loader.transmittingWaitQueue.add(this); // Suki - network-constrained chunk sending
 
             this.player.level.timings.playerChunkLoaderUpdateDecideWhetherToRecalculate.startTiming(); try { // Suki - per-player view distance
             if (
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index fc9fef4694bd05210abf8654de928e3c09a4caf2..33c12ce83333f0d09f0eb2ebe996a1945e7ae079 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -180,6 +180,7 @@ import org.bukkit.event.player.PlayerPortalEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.inventory.MainHand;
+import org.sucraft.suki.chunk.PlayerNetworkConstrainedChunksStatus;
 import org.sucraft.suki.configuration.SukiGlobalConfiguration;
 import org.jetbrains.annotations.NotNull;
 // CraftBukkit end
@@ -535,6 +536,8 @@ public class ServerPlayer extends Player {
     public final com.destroystokyo.paper.util.PooledHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> cachedSingleMobDistanceMap;
     // Paper end
 
+    public final PlayerNetworkConstrainedChunksStatus constrainedChunksStatus; // Suki - network-constrained chunk sending
+
     // CraftBukkit start
     public String displayName;
     public net.kyori.adventure.text.Component adventure$displayName; // Paper
@@ -655,6 +658,7 @@ public class ServerPlayer extends Player {
         this.bukkitPickUpLoot = true;
         this.maxHealthCache = this.getMaxHealth();
         this.cachedSingleMobDistanceMap = new com.destroystokyo.paper.util.PooledHashSets.PooledObjectLinkedOpenHashSet<>(this); // Paper
+        this.constrainedChunksStatus = new PlayerNetworkConstrainedChunksStatus(this); // Suki - network-constrained chunk sending
     }
 
     // Yes, this doesn't match Vanilla, but it's the best we can do for now.
@@ -2550,6 +2554,7 @@ public class ServerPlayer extends Player {
             }
             // Paper end
         }
+        this.constrainedChunksStatus.sendKeepaliveForChunkInTransit(); // Suki - network-constrained chunk sending
     }
 
     public void untrackChunk(ChunkPos chunkPos, boolean concernsTracking) {
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 415bb5e1c600630d4ef79bf4faeb29d3dc4f96b9..7f11c9e0ab7902d42f381cbedd36cb84f8ae74ec 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -3501,12 +3501,14 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     @Override
     public void handleKeepAlive(ServerboundKeepAlivePacket packet) {
+        if (player.constrainedChunksStatus.removePacketsInTransitUpToKeepaliveId(packet.getId())) return; // Suki - network-constrained chunk sending
         // Gale start - Purpur - send multiple keep-alive packets
         if (GaleGlobalConfiguration.get().misc.keepalive.sendMultiple) {
             long id = packet.getId();
             if (!this.keepAlives.isEmpty() && this.keepAlives.contains(id)) {
                 int ping = (int) (Util.getMillis() - id);
                 this.player.latency = (this.player.latency * 3 + ping) / 4;
+                this.player.constrainedChunksStatus.updateMaxNumberOfPacketsInTransitAfterLatencyUpdate(); // Suki - network-constrained chunk sending
                 this.keepAlives.clear(); // We got a valid response, let's roll with it and forget the rest
             }
         } else
@@ -3516,6 +3518,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             int i = (int) (Util.getMillis() - this.keepAliveTime);
 
             this.player.latency = (this.player.latency * 3 + i) / 4;
+            this.player.constrainedChunksStatus.updateMaxNumberOfPacketsInTransitAfterLatencyUpdate(); // Suki - network-constrained chunk sending
             this.keepAlivePending = false;
         } else if (!this.isSingleplayerOwner()) {
             // Suki start - disable keep-alive kicks - no disconnect on late or wrong keep-alive
diff --git a/src/main/java/org/sucraft/suki/chunk/ChunkPacketInTransit.java b/src/main/java/org/sucraft/suki/chunk/ChunkPacketInTransit.java
new file mode 100644
index 0000000000000000000000000000000000000000..ddc20f166b65d8cdc18e61b277851f8847502ba5
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/chunk/ChunkPacketInTransit.java
@@ -0,0 +1,18 @@
+// Suki - network-constrained chunk sending
+
+package org.sucraft.suki.chunk;
+
+/**
+ * A chunk packet that is in transit to a player.
+ */
+public class ChunkPacketInTransit {
+
+    final long keepaliveId;
+    final long sentTimestamp;
+
+    ChunkPacketInTransit(long keepaliveId, long sentTimestamp) {
+        this.keepaliveId = keepaliveId;
+        this.sentTimestamp = sentTimestamp;
+    }
+
+}
diff --git a/src/main/java/org/sucraft/suki/chunk/PlayerNetworkConstrainedChunksStatus.java b/src/main/java/org/sucraft/suki/chunk/PlayerNetworkConstrainedChunksStatus.java
new file mode 100644
index 0000000000000000000000000000000000000000..872d58a01747ba1f19b832c5ad16846e2eb3dc04
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/chunk/PlayerNetworkConstrainedChunksStatus.java
@@ -0,0 +1,194 @@
+// Suki - network-constrained chunk sending
+
+package org.sucraft.suki.chunk;
+
+import io.papermc.paper.configuration.GlobalConfiguration;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.ChunkPos;
+import org.jetbrains.annotations.Nullable;
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
+import org.sucraft.suki.util.ChunkDistanceUtils;
+
+import java.util.ArrayDeque;
+import java.util.concurrent.Semaphore;
+
+/**
+ * The status of network-constrained chunks for a specific {@link ServerPlayer}.
+ */
+public class PlayerNetworkConstrainedChunksStatus {
+
+    private final ServerPlayer player;
+
+    public PlayerNetworkConstrainedChunksStatus(ServerPlayer player) {
+        this.player = player;
+    }
+
+    private final Semaphore networkConstrainedSendingMutex = new Semaphore(1);
+
+    private volatile int maxNumberOfChunkPacketsInTransitBasedOnConnection = SukiGlobalConfiguration.get().misc.networkConstrainedChunkSending.initialMaxChunkPacketsInTransit;
+    // Keep track of chunk packets in transit
+    private final ArrayDeque<ChunkPacketInTransit> chunkInitializationPacketsInTransitKeepaliveIds = new ArrayDeque<>();
+
+    public int getMaxNumberOfChunkPacketsInTransitBasedOnConnectionVolatile() {
+        return this.maxNumberOfChunkPacketsInTransitBasedOnConnection;
+    }
+
+    public void setMaxNumberOfChunkPacketsInTransitBasedOnConnection(int maxNumberOfChunkPacketsInTransitBasedOnConnection) {
+        while (!this.networkConstrainedSendingMutex.tryAcquire()) {
+            Thread.onSpinWait();
+        }
+        try {
+            this.maxNumberOfChunkPacketsInTransitBasedOnConnection = maxNumberOfChunkPacketsInTransitBasedOnConnection;
+        } finally {
+            this.networkConstrainedSendingMutex.release();
+        }
+    }
+
+    private void addChunkInitializationPacketInTransit(long keepaliveId) {
+        ChunkPacketInTransit packet = new ChunkPacketInTransit(keepaliveId, System.currentTimeMillis());
+        while (!this.networkConstrainedSendingMutex.tryAcquire()) {
+            Thread.onSpinWait();
+        }
+        try {
+            this.chunkInitializationPacketsInTransitKeepaliveIds.addLast(packet);
+        } finally {
+            this.networkConstrainedSendingMutex.release();
+        }
+    }
+
+    public void removeOverdueChunkInitializationPacketsInTransit() {
+        if (SukiGlobalConfiguration.get().misc.networkConstrainedChunkSending.assumePacketsInTransitArrivedAfterTime <= 0) {
+            return;
+        }
+        while (!this.networkConstrainedSendingMutex.tryAcquire()) {
+            Thread.onSpinWait();
+        }
+        try {
+            while (!chunkInitializationPacketsInTransitKeepaliveIds.isEmpty()) {
+                if (chunkInitializationPacketsInTransitKeepaliveIds.peekFirst().sentTimestamp < System.currentTimeMillis() - SukiGlobalConfiguration.get().misc.networkConstrainedChunkSending.assumePacketsInTransitArrivedAfterTime) {
+                    chunkInitializationPacketsInTransitKeepaliveIds.pollFirst();
+                } else {
+                    break;
+                }
+            }
+        } finally {
+            this.networkConstrainedSendingMutex.release();
+        }
+    }
+
+    /**
+     * @return If this keepalive id was recognized as a fake one sent after a chunk initialization
+     */
+    public boolean removePacketsInTransitUpToKeepaliveId(long keepaliveId) {
+        if (!SukiGlobalConfiguration.get().misc.networkConstrainedChunkSending.enabled) {
+            return false;
+        }
+        while (!this.networkConstrainedSendingMutex.tryAcquire()) {
+            Thread.onSpinWait();
+        }
+        try {
+            if (this.chunkInitializationPacketsInTransitKeepaliveIds.stream().anyMatch(it -> it.keepaliveId == keepaliveId)) {
+                // This is a response to one of our fake keep-alive packets
+                // We will remove all chunk packets in transition up to the received one that was apparently successful
+                while (!this.chunkInitializationPacketsInTransitKeepaliveIds.isEmpty()) {
+                    if (this.chunkInitializationPacketsInTransitKeepaliveIds.peekFirst().keepaliveId == keepaliveId) {
+                        this.chunkInitializationPacketsInTransitKeepaliveIds.removeFirst();
+                        break;
+                    }
+                    this.chunkInitializationPacketsInTransitKeepaliveIds.removeFirst();
+                }
+                return true;
+            }
+        } finally {
+            this.networkConstrainedSendingMutex.release();
+        }
+        return false;
+    }
+
+    /**
+     * @param chunk The relevant chunk initialization packet, or null if no packet in specific is being considered.
+     */
+    public boolean canSendChunkInitializationPacketNow(@Nullable ChunkPos chunk) {
+        if (!SukiGlobalConfiguration.get().misc.networkConstrainedChunkSending.enabled) {
+            return true;
+        }
+        if (chunk != null && ChunkDistanceUtils.getChessboardDistance(this.player, chunk) <= SukiGlobalConfiguration.get().misc.networkConstrainedChunkSending.ignoreNetworkConditionsForChunksWithinChessboardDistance) {
+            return true;
+        }
+
+        while (!this.networkConstrainedSendingMutex.tryAcquire()) {
+            Thread.onSpinWait();
+        }
+        try {
+            return this.chunkInitializationPacketsInTransitKeepaliveIds.size() < this.maxNumberOfChunkPacketsInTransitBasedOnConnection;
+
+        } finally {
+            this.networkConstrainedSendingMutex.release();
+        }
+    }
+
+    public void sendKeepaliveForChunkInTransit() {
+
+        if (!SukiGlobalConfiguration.get().misc.networkConstrainedChunkSending.enabled) {
+            return;
+        }
+
+        // Quickly write a keepalive packet after sending a chunk
+        // Generate a keepalive challenge that is not the same as any real one (the real ones use the current system time itself)
+        long keepAliveChallenge = -System.currentTimeMillis();
+
+        Packet<?> followingKeepAlivePacket = new net.minecraft.network.protocol.game.ClientboundKeepAlivePacket(keepAliveChallenge);
+        this.addChunkInitializationPacketInTransit(keepAliveChallenge);
+        this.player.connection.send(followingKeepAlivePacket);
+
+    }
+
+    public void updateMaxNumberOfPacketsInTransitAfterLatencyUpdate() {
+        if (!SukiGlobalConfiguration.get().misc.networkConstrainedChunkSending.enabled) {
+            return;
+        }
+        // Player ping was updated:
+        // we updated the max number of chunk packets in transit,
+        // in such a way that the maximum number of chunks that can be sent is at least the configured player chunk send rate
+        // (we want the max number of chunk packets in transit to be as low as possible, but we cannot set it very low for poor ping connections,
+        // because then the chunk sending speed would become too low)
+        // For example: if the configured 'agreeable' player chunk send rate is 50 chunks/sec, we want to set the max number of chunk packets in transit
+        // so that we can reach at least 50 chunks/sec based on that system (because we should not unnecessarily limit a setting that
+        // we have already apparently decided is good - we assume that the configured player chunk send rate is well chosen for a nice
+        // world loading speed), if we use a factor of 1.5, we should reach 75 chunks/sec in this way, and then if we have a ping of 20ms,
+        // we would be limited to 50 chunks/sec if we have a max of 1 chunk packet in transit, and 100 chunks/sec if we have a max of 2 chunk packets
+        // in transit, so we set the max number of chunk packets in transit to 2 so we are at least above the 75 chunks/sec (which is the configured
+        // player chunk send rate with a margin, that we want to be above)
+        // Note that this can lead to a very high number of chunk packets in transit for connections with very poor ping, which is not desirable,
+        // because it would overload any client suddenly due to a burst of packets, so we still do not set the max number of chunk packets in transit
+        // higher than a certain limit (like 12 or so) because we have decided at that point even poor connections still have an okay world loading speed
+        // so we don't need to boost it into levels that the client CPU/GPU can't handle
+        var level = this.player.level;
+        if (level != null) {
+            if (this.player.latency > 0) {
+                var agreeableChunkSendRate = level.sukiConfig().misc.networkConstrainedChunkSending.maxChunkPacketsInTransit.agreeableChunkSendRate;
+                var chunksPerSecondIfMaxOneChunkPacketInTransit = 1000.0 / this.player.latency;
+                int newMaxNumberOfChunkPacketsInTransitBasedOnConnection = Math.max((int) Math.ceil(agreeableChunkSendRate / chunksPerSecondIfMaxOneChunkPacketInTransit), 1);
+                if (player.level.sukiConfig().misc.networkConstrainedChunkSending.maxChunkPacketsInTransit.max > 0) {
+                    newMaxNumberOfChunkPacketsInTransitBasedOnConnection = Math.min(
+                        newMaxNumberOfChunkPacketsInTransitBasedOnConnection,
+                        player.level.sukiConfig().misc.networkConstrainedChunkSending.maxChunkPacketsInTransit.max
+                    );
+                }
+                if (player.level.sukiConfig().misc.networkConstrainedChunkSending.maxChunkPacketsInTransit.min > 0) {
+                    newMaxNumberOfChunkPacketsInTransitBasedOnConnection = Math.max(
+                        newMaxNumberOfChunkPacketsInTransitBasedOnConnection,
+                        player.level.sukiConfig().misc.networkConstrainedChunkSending.maxChunkPacketsInTransit.min
+                    );
+                }
+                newMaxNumberOfChunkPacketsInTransitBasedOnConnection = Math.max(
+                    newMaxNumberOfChunkPacketsInTransitBasedOnConnection,
+                    1
+                );
+                this.setMaxNumberOfChunkPacketsInTransitBasedOnConnection(newMaxNumberOfChunkPacketsInTransitBasedOnConnection);
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index d5c1727bf81c7f00d1cb0bf78b7c7b4fc1905754..4210fb79a1b0131c16ef05540940314df100929d 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -231,6 +231,28 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
         }
         // Suki end - hide plugins
 
+        // Suki start - network-constrained chunk sending
+        public NetworkConstrainedChunkSending networkConstrainedChunkSending;
+        public class NetworkConstrainedChunkSending extends ConfigurationPart {
+
+            public boolean enabled = false;
+            public transient int initialMaxChunkPacketsInTransit = 12;
+
+            /**
+             * In milliseconds
+             * <br>
+             * A nonpositive value disables this feature
+             */
+            public int assumePacketsInTransitArrivedAfterTime = 600;
+
+            /**
+             * A negative value disables this feature
+             */
+            public int ignoreNetworkConditionsForChunksWithinChessboardDistance = 1;
+
+        }
+        // Suki end - network-constrained chunk sending
+
     }
 
 }
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
index b055a89daebe468374b8da58010e232fc2cedbd1..fb020e39b49b9bfc2a6b6eec579998a7693da7bd 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
@@ -212,6 +212,22 @@ public class SukiWorldConfiguration extends ConfigurationPart {
         public boolean relocateCorruptedChunks = true;
         // Suki end - do not relocate corrupted chunks
 
+        // Suki start - network-constrained chunk sending
+        public NetworkConstrainedChunkSending networkConstrainedChunkSending;
+        public class NetworkConstrainedChunkSending extends ConfigurationPart {
+
+            public MaxChunkPacketsInTransit maxChunkPacketsInTransit;
+            public class MaxChunkPacketsInTransit extends ConfigurationPart {
+
+                public int min = -1;
+                public int max = -1;
+                public double agreeableChunkSendRate = 25.0;
+
+            }
+
+        }
+        // Suki end - network-constrained chunk sending
+
     }
 
     // Suki start - per-player view distance
