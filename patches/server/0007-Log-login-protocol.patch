From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Tue, 21 Feb 2023 21:05:10 +0100
Subject: [PATCH] Log login protocol

License: AGPL-3.0 (https://www.gnu.org/licenses/agpl-3.0.html)
Suki - https://github.com/SuCraft/Suki

diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index f3bbfb472b9be083dd1f1a317b90dda5c3c4f851..869e2572fa34af9eb661ee3de4dce81df00eae2f 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.network;
 
+import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.objects.Object2LongMap;
 import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
 import net.minecraft.SharedConstants;
@@ -11,6 +12,8 @@ import net.minecraft.network.protocol.handshake.ServerHandshakePacketListener;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.server.MinecraftServer;
+import org.slf4j.Logger;
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
 
 // CraftBukkit start
 import java.net.InetAddress;
@@ -33,6 +36,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
     private final MinecraftServer server;
     private final Connection connection;
     private static final boolean BYPASS_HOSTCHECK = Boolean.getBoolean("Paper.bypassHostCheck"); // Paper
+    private static final Logger LOGGER = LogUtils.getLogger(); // Suki - log login protocol - log handshakes
 
     public ServerHandshakePacketListenerImpl(MinecraftServer server, Connection connection) {
         this.server = server;
@@ -45,6 +49,11 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
         switch (packet.getIntention()) {
             case LOGIN:
                 this.connection.setProtocol(ConnectionProtocol.LOGIN);
+                // Suki start - log login protocol - log handshakes
+                if (SukiGlobalConfiguration.get().consoleLogs.loginProtocol.packets.handshake) {
+                    ServerHandshakePacketListenerImpl.LOGGER.info("Received handshake packet from '" + this.connection.getRemoteAddress() + "': host name = '" + packet.getHostName() + "', port = " + packet.getPort() + ", protocol version = " + packet.getProtocolVersion());
+                }
+                // Suki end - log login protocol - log handshakes
                 // CraftBukkit start - Connection throttle
                 try {
                     if (!(this.connection.channel.localAddress() instanceof io.netty.channel.unix.DomainSocketAddress)) { // Paper - the connection throttle is useless when you have a Unix domain socket
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 5b7c12db86be64433c65e31e3ecc0b444b0ddf48..e82bbd36da5259f51cbe1bc3b346816a79725f21 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -9,6 +9,7 @@ import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.security.PrivateKey;
+import java.util.Optional;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
@@ -44,6 +45,7 @@ import org.slf4j.Logger;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
 import org.bukkit.event.player.PlayerPreLoginEvent;
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
 // CraftBukkit end
 
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener {
@@ -170,6 +172,11 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
         } else {
             this.state = ServerLoginPacketListenerImpl.State.ACCEPTED;
             if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
+                // Suki start - log login protocol - log Set Compression packets
+                if (SukiGlobalConfiguration.get().consoleLogs.loginProtocol.packets.setCompression) {
+                    ServerLoginPacketListenerImpl.LOGGER.info("Sent set compression packet to '" + this.connection.getRemoteAddress() + "' (with player = '" + s.getName() + "'): compression threshold = " + this.server.getCompressionThreshold());
+                }
+                // Suki end - log login protocol - log Set Compression packets
                 this.connection.send(new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()), PacketSendListener.thenRun(() -> {
                     this.connection.setupCompression(this.server.getCompressionThreshold(), true);
                 }));
@@ -255,6 +262,12 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
         // Paper end - validate usernames
         GameProfile gameprofile = this.server.getSingleplayerProfile();
 
+        // Suki start - log login protocol - log Login Start packets
+        if (SukiGlobalConfiguration.get().consoleLogs.loginProtocol.packets.loginStart) {
+            ServerLoginPacketListenerImpl.LOGGER.info("Received login start packet from '" + this.connection.getRemoteAddress() + "': name = " + Optional.ofNullable(packet.name()).map(name -> "'" + name + "'").orElse("(none)") + ", UUID = " + Optional.ofNullable(packet.profileId()).flatMap($ -> $).map(UUID::toString).orElse("(none)"));
+        }
+        // Suki end - log login protocol - log Login Start packets
+
         if (gameprofile != null && packet.name().equalsIgnoreCase(gameprofile.getName())) {
             this.gameProfile = gameprofile;
             this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index 037d7700b4cd783aa0bdcaa81683b50ae0c44809..86b3714a850a73d1482ea63ded43a9f59da78e6e 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -20,10 +20,26 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
     @Setting(Configuration.VERSION_FIELD)
     public int version = CURRENT_VERSION;
 
-    public SmallOptimizations smallOptimizations;
-    public class SmallOptimizations extends ConfigurationPart {
+    public ConsoleLogs consoleLogs;
+    public class ConsoleLogs extends ConfigurationPart {
 
-        public int dummyValue = 0;
+        // Suki start - log login protocol
+        public LoginProtocol loginProtocol;
+
+        public class LoginProtocol extends ConfigurationPart {
+
+            public Packets packets;
+
+            public class Packets extends ConfigurationPart {
+
+                public boolean handshake = false; // Suki - login protocol - log handshakes to console
+                public boolean loginStart = false; // Suki - login protocol - log Login Start packets to console
+                public boolean setCompression = false; // Suki - login protocol - log Set Compression packets to console
+
+            }
+
+        }
+        // Suki end log login protocol
 
     }
 
