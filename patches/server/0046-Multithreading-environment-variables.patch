From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Thu, 29 Sep 2022 14:44:20 +0200
Subject: [PATCH] Multithreading environment variables


diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 4b4f3533f6f8624551794e63baae87138a495835..37836dbdbff2ca4cd8bfc8300087377f70da2ee1 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -27,7 +27,6 @@ import java.net.URL;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
-import java.security.AccessController;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.time.Duration;
@@ -151,9 +150,15 @@ public class Util {
     }
 
     private static ExecutorService makeExecutor(String s, int priorityModifier) { // Paper - add priority
+        // Suki start - multithreading environment variables
+        return makeExecutor(s, priorityModifier, -1);
+    }
+
+    public static ExecutorService makeExecutor(String s, int priorityModifier, int specificThreads) {
+        // Suki end - multithreading environment variables
         // Paper start - use simpler thread pool that allows 1 thread
         // Paper start - also try to avoid suffocating the system with the worldgen workers
-        int cpus = Runtime.getRuntime().availableProcessors() / 2;
+        int cpus = Integer.getInteger("suki.systemcpus.forexecutors", Runtime.getRuntime().availableProcessors() / 2); // Suki - multithreading environment variables
         int i;
         if (cpus <= 4) {
             i = cpus <= 2 ? 1 : 2;
@@ -166,6 +171,11 @@ public class Util {
         i = Math.min(8, i);
         // Paper end - also try to avoid suffocating the system with the worldgen workers
         i = Integer.getInteger("Paper.WorkerThreadCount", i);
+        // Suki start - multithreading environment variables
+        if (specificThreads > 0) {
+            i = specificThreads;
+        }
+        // Suki end - multithreading environment variables
         ExecutorService executorService;
 
         if (i <= 0) {
@@ -173,7 +183,7 @@ public class Util {
         } else {
             //executorService = new java.util.concurrent.ThreadPoolExecutor(i, i,0L, TimeUnit.MILLISECONDS, new java.util.concurrent.LinkedBlockingQueue<Runnable>(), target -> new net.minecraft.server.ServerWorkerThread(target, s, priorityModifier)); // JettPack
             // JettPack start
-            executorService = Integer.getInteger("Paper.WorkerThreadCount", i) <= 0 ? MoreExecutors.newDirectExecutorService() : new AbstractExecutorService(){
+            executorService = new AbstractExecutorService(){ // Suki - multithreading environment variables
                 private volatile boolean shutdown = false;
 
                 @Override
diff --git a/src/main/java/net/minecraft/server/MCUtil.java b/src/main/java/net/minecraft/server/MCUtil.java
index 949e2bd008930be0792065cf9ce92972c28c4354..7b7eb0b41cbefb8d42607cb9aae969d73e806611 100644
--- a/src/main/java/net/minecraft/server/MCUtil.java
+++ b/src/main/java/net/minecraft/server/MCUtil.java
@@ -55,7 +55,7 @@ import java.util.function.Supplier;
 
 public final class MCUtil {
     public static final ThreadPoolExecutor asyncExecutor = new ThreadPoolExecutor(
-        0, 2, 60L, TimeUnit.SECONDS,
+        Integer.getInteger("suki.threads.asyncexecutor", 4), Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, // JettPack // Suki - multithreading environment variables
         new LinkedBlockingQueue<>(),
         new ThreadFactoryBuilder()
             .setNameFormat("Paper Async Task Handler Thread - %1$d")
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 0b677d128cbd108bb58d74d3cfe6015551e94143..72adf5879fc476e1495cfeaf8df31212750e1200 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -318,7 +318,7 @@ public class Main {
     // Paper start - fix and optimise world upgrading
     public static void convertWorldButItWorks(net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem> dimensionType, net.minecraft.world.level.storage.LevelStorageSource.LevelStorageAccess worldSession,
                                               DataFixer dataFixer, Optional<net.minecraft.resources.ResourceKey<com.mojang.serialization.Codec<? extends net.minecraft.world.level.chunk.ChunkGenerator>>> generatorKey, boolean removeCaches) {
-        int threads = Runtime.getRuntime().availableProcessors() * 3 / 8;
+        int threads = Integer.getInteger("suki.threads.upgradeworld", Integer.getInteger("suki.systemcpus.forupgradeworld", Runtime.getRuntime().availableProcessors()) * 3 / 8); // Suki - multithreading environment variables
         final ThreadedWorldUpgrader worldUpgrader = new ThreadedWorldUpgrader(dimensionType, worldSession.getLevelId(), worldSession.levelDirectory.path().toFile(), threads, dataFixer, generatorKey, removeCaches);
         worldUpgrader.convert();
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 015ba3c279b5b0186b056f5574765ac33b18b250..1ccac60980c9e4e8f13a608d3941862df1f158be 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -313,8 +313,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<Runnab
         thread.setUncaughtExceptionHandler((thread1, throwable) -> {
             MinecraftServer.LOGGER.error("Uncaught exception in server thread", throwable);
         });
-        if (Runtime.getRuntime().availableProcessors() > 4) {
-            thread.setPriority(8);
+        // Suki start - multithreading environment variables
+        if (Integer.getInteger("suki.mainthreadpriority", -1) != -1 || Runtime.getRuntime().availableProcessors() > 4) {
+            thread.setPriority(Integer.getInteger("suki.mainthreadpriority", 8));
+            // Suki end - multithreading environment variables
         }
 
         S s0 = serverFactory.apply(thread); // CraftBukkit - decompile error
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 8980219d1de080eb46fdf4d3dc7c597ee576e2f9..3eefebf2f5484589185d3fef9a023e13c932878b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -48,6 +48,7 @@ import java.util.stream.Collectors;
 import javax.imageio.ImageIO;
 
 import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
+import net.minecraft.Util;
 import net.minecraft.advancements.Advancement;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -1264,9 +1265,11 @@ public final class CraftServer implements Server {
             worldKey = ResourceKey.create(net.minecraft.core.Registry.DIMENSION_REGISTRY, new net.minecraft.resources.ResourceLocation(creator.key().getNamespace().toLowerCase(java.util.Locale.ENGLISH), creator.key().getKey().toLowerCase(java.util.Locale.ENGLISH))); // Paper
         }
 
-        ServerLevel internal = (ServerLevel) new ServerLevel(this.console, console.executor, worldSession, worlddata, worldKey, worlddimension, this.getServer().progressListenerFactory.create(11),
+        // Suki start - multithreading environment variables
+        int levelExecutorThreads = Integer.getInteger("suki.threads.levelexecutor", -1);
+        ServerLevel internal = (ServerLevel) new ServerLevel(this.console, levelExecutorThreads > 0 ? Util.makeExecutor(name, -1, levelExecutorThreads) : console.executor, worldSession, worlddata, worldKey, worlddimension, this.getServer().progressListenerFactory.create(11),
                 worlddata.worldGenSettings().isDebug(), j, creator.environment() == Environment.NORMAL ? list : ImmutableList.of(), true, creator.environment(), generator, biomeProvider);
-
+        // Suki end - multithreading environment variables
         if (!(this.worlds.containsKey(name.toLowerCase(java.util.Locale.ENGLISH)))) {
             return null;
         }
