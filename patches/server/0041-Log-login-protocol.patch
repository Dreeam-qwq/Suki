From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Mon, 3 Oct 2022 16:46:09 +0200
Subject: [PATCH] Log login protocol


diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index ac254e4fe3973a8cb3321e96c651847e387d9f0e..81c5d2f8c276016245b09ce2bc712656efbbda64 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.network;
 
+import com.mojang.logging.LogUtils;
 import net.minecraft.SharedConstants;
 import net.minecraft.network.Connection;
 import net.minecraft.network.ConnectionProtocol;
@@ -19,6 +20,8 @@ import it.unimi.dsi.fastutil.objects.Object2LongMap;
 import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
 import java.util.Iterator;
 import java.util.Map;
+import org.slf4j.Logger;
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
 // Dionysus end
 
 public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketListener {
@@ -36,6 +39,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
     private final MinecraftServer server;
     private final Connection connection;
     private static final boolean BYPASS_HOSTCHECK = Boolean.getBoolean("Paper.bypassHostCheck"); // Paper
+    private static final Logger LOGGER = LogUtils.getLogger(); // Suki - login protocol - log handshakes to console
 
     public ServerHandshakePacketListenerImpl(MinecraftServer server, Connection connection) {
         this.server = server;
@@ -47,6 +51,11 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
         switch (packet.getIntention()) {
             case LOGIN:
                 this.connection.setProtocol(ConnectionProtocol.LOGIN);
+                // Suki start - login protocol - log handshakes to console
+                    if (SukiGlobalConfiguration.get().consoleLogs.loginProtocol.packets.handshake) {
+                    ServerHandshakePacketListenerImpl.LOGGER.info("Received handshake packet from '" + this.connection.getRemoteAddress() + "': host name = '" + packet.getHostName() + "', port = " + packet.getPort() + ", protocol version = " + packet.getProtocolVersion());
+                }
+                // Suki end - login protocol - log handshakes to console
                 // CraftBukkit start - Connection throttle
                 try {
                     if (!(this.connection.channel.localAddress() instanceof io.netty.channel.unix.DomainSocketAddress)) { // Paper - the connection throttle is useless when you have a Unix domain socket
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index bb3afd79d1e1a164ce26b9d3ce47b30aacf3ff45..74cb30442215e110cb39740dfb0b4ab3127d5104 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -11,6 +11,7 @@ import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.security.PrivateKey;
 import java.time.Duration;
+import java.util.Optional;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
@@ -190,6 +191,11 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
         } else {
             this.state = ServerLoginPacketListenerImpl.State.ACCEPTED;
             if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
+                // Suki start - login protocol - log Set Compression packets to console
+                if (SukiGlobalConfiguration.get().consoleLogs.loginProtocol.packets.setCompression) {
+                    ServerLoginPacketListenerImpl.LOGGER.info("Sent set compression packet to '" + this.connection.getRemoteAddress() + "' (with player = '" + s.getName() + "'): compression threshold = " + this.server.getCompressionThreshold());
+                }
+                // Suki end - login protocol - log Set Compression packets to console
                 this.connection.send(new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()), PacketSendListener.thenRun(() -> {
                     this.connection.setupCompression(this.server.getCompressionThreshold(), true);
                 }));
@@ -287,6 +293,12 @@ public class ServerLoginPacketListenerImpl implements TickablePacketListener, Se
         this.profilePublicKeyData = (ProfilePublicKey.Data) packet.publicKey().orElse(null); // CraftBukkit - decompile error
         GameProfile gameprofile = this.server.getSingleplayerProfile();
 
+        // Suki start - login protocol - log Login Start packets to console
+        if (SukiGlobalConfiguration.get().consoleLogs.loginProtocol.packets.loginStart) {
+            ServerLoginPacketListenerImpl.LOGGER.info("Received login start packet from '" + this.connection.getRemoteAddress() + "': name = " + Optional.ofNullable(packet.name()).map(name -> "'" + name + "'").orElse("(none)") + ", UUID = " + Optional.ofNullable(packet.profileId()).flatMap($ -> $).map(UUID::toString).orElse("(none)") + ", public key present = " + Optional.ofNullable(packet.publicKey()).flatMap($ -> $).isPresent());
+        }
+        // Suki end - login protocol - log Login Start packets to console
+
         if (gameprofile != null && packet.name().equalsIgnoreCase(gameprofile.getName())) {
             this.gameProfile = gameprofile;
             this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index cbf47f16f6dbbb6968777b53f32ab79538ffd1b0..ed0328570e5cd1f23ef67c33bad7bd127051ae15 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -21,7 +21,7 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
     @Setting(Configuration.VERSION_FIELD)
     public int version = CURRENT_VERSION;
 
-    // Suki start - less console logs
+    // Suki start - less console logs, login protocol - log login protocol
 
     public ConsoleLogs consoleLogs;
 
@@ -64,9 +64,25 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
 
         }
 
+        public LoginProtocol loginProtocol;
+
+        public class LoginProtocol extends ConfigurationPart {
+
+            public Packets packets;
+
+            public class Packets extends ConfigurationPart {
+
+                public boolean handshake = false; // Suki - login protocol - log handshakes to console
+                public boolean loginStart = false; // Suki - login protocol - log Login Start packets to console
+                public boolean setCompression = false; // Suki - login protocol - log Set Compression packets to console
+
+            }
+
+        }
+
     }
 
-    // Suki end - less console logs
+    // Suki end - less console logs, login protocol - log login protocol
 
     // Suki start - no signed chat
 
